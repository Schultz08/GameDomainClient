[{"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\index.tsx":"1","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\reportWebVitals.ts":"2","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\App.tsx":"3","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\index.tsx":"4","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Auth\\Auth.tsx":"5","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoards.tsx":"6","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoardDisplay.tsx":"7","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\Message.tsx":"8","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\MessageDisplay.tsx":"9","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Nav\\SideNav.tsx":"10","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\SendMessage.tsx":"11","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\index.tsx":"12","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\sunsetTheme.tsx":"13","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\mainTheme.tsx":"14","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\darkTheme.tsx":"15","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\ReplyMessage.tsx":"16","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\UpdateMessage.tsx":"17","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\GameLibrary\\GameLibrary.tsx":"18","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\GameLibrary\\createLibrary.tsx":"19","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\GameLibrary\\GameDisplay.tsx":"20","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\CircleBlaster.jsx":"21","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Admin\\AdminMenu.tsx":"22"},{"size":500,"mtime":499162500000,"results":"23","hashOfConfig":"24"},{"size":425,"mtime":499162500000,"results":"25","hashOfConfig":"24"},{"size":6609,"mtime":1610523684857,"results":"26","hashOfConfig":"24"},{"size":540,"mtime":1610483766719,"results":"27","hashOfConfig":"24"},{"size":7167,"mtime":1610524814968,"results":"28","hashOfConfig":"24"},{"size":805,"mtime":1610417764494,"results":"29","hashOfConfig":"24"},{"size":1334,"mtime":1610391259719,"results":"30","hashOfConfig":"24"},{"size":4077,"mtime":1610386815102,"results":"31","hashOfConfig":"24"},{"size":15136,"mtime":1610505429306,"results":"32","hashOfConfig":"24"},{"size":5925,"mtime":1610489526494,"results":"33","hashOfConfig":"24"},{"size":5879,"mtime":1610475404272,"results":"34","hashOfConfig":"24"},{"size":155,"mtime":1610342710667,"results":"35","hashOfConfig":"24"},{"size":420,"mtime":1610342710671,"results":"36","hashOfConfig":"24"},{"size":1853,"mtime":1610513154398,"results":"37","hashOfConfig":"24"},{"size":448,"mtime":1610342710666,"results":"38","hashOfConfig":"24"},{"size":3763,"mtime":1610475748337,"results":"39","hashOfConfig":"24"},{"size":3768,"mtime":1610342710660,"results":"40","hashOfConfig":"24"},{"size":2685,"mtime":1610381698505,"results":"41","hashOfConfig":"24"},{"size":1010,"mtime":1610355649910,"results":"42","hashOfConfig":"24"},{"size":4387,"mtime":1610393082864,"results":"43","hashOfConfig":"24"},{"size":13418,"mtime":1610394128784,"results":"44","hashOfConfig":"24"},{"size":13555,"mtime":1610523332778,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"1djh20e",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"48"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"48"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"68","messages":"69","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"48"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"48"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"97"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\index.tsx",[],["100","101"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\reportWebVitals.ts",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\App.tsx",["102","103","104"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\index.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Auth\\Auth.tsx",["105"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoards.tsx",["106"],"import React from \"react\";\r\nimport LeaderBoardsDisplay from \"./LeaderBoardDisplay\"\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass LeaderBoards extends React.Component {\r\n    state ={\r\n        players: []\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(`http://localhost:3000/score/allScores/`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": localStorage.getItem(\"token\")!\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.setState({players: data}))\r\n    }\r\n\r\n    render(){\r\n        console.log(this.state.players, \"leaderBoard\")\r\n        return (\r\n            <LeaderBoardsDisplay players={this.state.players}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LeaderBoards;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoardDisplay.tsx",["107","108","109"],"import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { DataGrid, ColDef } from '@material-ui/data-grid';\r\n\r\nconst useStyle = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: \"center\",\r\n        }\r\n\r\n    })\r\n)\r\n\r\n\r\nconst LeaderBoardsDisplay = (props: any) => {\r\n    const classes = useStyle();\r\n    return (\r\n        <div className={classes.root}>\r\n            \r\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                {\r\n                    props.players.map((player: any, index: number) => {\r\n                        return (\r\n                            <Grid item xs key={index}>\r\n                              \r\n                                    {player.gameName}<br/>\r\n                                    {player.user.userName}<br/>\r\n                                    {player.score}\r\n                               \r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LeaderBoardsDisplay;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\Message.tsx",["110"],"import React from \"react\";\r\nimport MessageDisplay from \"./MessageDisplay\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport { Typography, Grid, withStyles, Theme, createStyles } from \"@material-ui/core\";\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n\r\n    root: {\r\n        width: '100%',\r\n    },\r\n});\r\n\r\ntype myProps = {\r\n    token: string | null;\r\n    classes: any;\r\n}\r\n\r\ntype myState = {\r\n    conversation: any | null;\r\n    redirect: string;\r\n    loggedInUserId: number | null;\r\n}\r\n\r\n\r\nclass Message extends React.Component<myProps, myState> {\r\n    constructor(props: myProps) {\r\n        super(props)\r\n        this.state = {\r\n            conversation: null,\r\n            redirect: \"\",\r\n            loggedInUserId: null,\r\n        }\r\n    }\r\n\r\n\r\n    componentDidMount() {\r\n        if (this.state.conversation == null) {\r\n            this.getMail()\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.conversation == null) {\r\n            this.getMail()\r\n        }\r\n    }\r\n\r\n    getMail = () => {\r\n\r\n        fetch(`http://localhost:3000/message/getMail`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": localStorage.getItem(\"token\")!\r\n            }\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => { console.log(data, \"Fetch\"); this.setState({ loggedInUserId: data.receivingId }); this.setState({ conversation: data }) })\r\n            .catch(err => console.log(err))\r\n\r\n    }\r\n\r\n    deleteMessage = (id: number, isReplyMessage: boolean) => {\r\n        if (isReplyMessage) {\r\n            fetch(`http://localhost:3000/reply/deleteReply/${id}`, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": localStorage.getItem(\"token\")!\r\n                }\r\n            })\r\n                .catch(err => console.log(err))\r\n            this.setState({ conversation: null })\r\n        } else {\r\n            fetch(`http://localhost:3000/message/deleteMessage/${id}`, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": localStorage.getItem(\"token\")!\r\n                }\r\n            })\r\n                .catch(err => console.log(err))\r\n            this.setState({ conversation: null })\r\n        }\r\n    }\r\n\r\n    displayConductor = (classes: any) => {\r\n        if (!this.state.conversation) {\r\n            console.log(\"fetch from conduct\")\r\n        }\r\n        console.log(this.state.conversation, \"displayconduct 1\")\r\n        if (this.state.conversation !== undefined && this.state.conversation !== null && this.state.conversation && this.state.conversation.messages.length > 0) {\r\n            console.log(this.state.conversation, \"displayconductor\")\r\n            return (\r\n                <div className={classes.root}>\r\n                    <Typography variant=\"h3\" >Inbox</Typography>\r\n                    <MessageDisplay\r\n                        token={this.props.token!}\r\n                        conversation={this.state.conversation}\r\n                        deleteMessage={this.deleteMessage}\r\n                        loggedInUserId={this.state.loggedInUserId}\r\n                    />\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <Typography variant=\"h3\" >Inbox</Typography>\r\n                    <h1>You have no Mail!!</h1>\r\n                    <button onClick={this.handleClick}>Create New Message</button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.setState({ redirect: \"/sendmessage\" })\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props\r\n        if (this.state.redirect) {\r\n            return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            this.displayConductor(classes)\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Message)","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\MessageDisplay.tsx",["111","112","113","114","115","116","117"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Nav\\SideNav.tsx",["118","119","120","121"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\SendMessage.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\index.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\sunsetTheme.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\mainTheme.tsx",["122","123","124","125"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\darkTheme.tsx",["126","127"],"// import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\r\nimport { createMuiTheme } from '@material-ui/core';\r\nimport { orange, yellow} from '@material-ui/core/colors';\r\n\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',   \r\n    primary: {\r\n      main: '#152B38',\r\n    },\r\n    secondary: {\r\n      main: '#65C5C7',\r\n    },\r\n    contrastThreshold: 3,\r\n    tonalOffset: 0.2,\r\n  },\r\n});\r\n\r\nexport default darkTheme;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\ReplyMessage.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\UpdateMessage.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\GameLibrary\\GameLibrary.tsx",["128"],"import React from \"react\";\r\nimport { Theme, createStyles, makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport { Button } from \"@material-ui/core\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport gameData from \"./createLibrary\"\r\n// const data = require((\"../../Games/data.json\"))\r\n\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        overflow: \"none\",\r\n        justifyContent: 'space-around',\r\n        width: \"90%\",\r\n        height: \"90%\",\r\n    },\r\n    gridList: {\r\n        width: \"90%\",\r\n        height: \"90%\",\r\n    },\r\n    icon: {\r\n        color: 'rgba(255, 255, 255, 0.54)',\r\n    },\r\n});\r\n\r\ntype myState = {\r\n    token: string;\r\n    redirect: string;\r\n}\r\n\r\ntype myProps = {\r\n    token: string;\r\n    classes: any;\r\n}\r\n\r\nclass GameLibrary extends React.Component<myProps, myState>{\r\n    constructor(props: myProps) {\r\n        super(props)\r\n        this.state = {\r\n            token: \"\",\r\n            redirect: \"\",\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n            return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div className={classes.root}>\r\n                <GridList cellHeight={180} className={classes.gridList}>\r\n                    <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\r\n                        <ListSubheader component=\"div\">Game Library</ListSubheader>\r\n                    </GridListTile>\r\n                    {gameData.map((game: any) => (\r\n                        <GridListTile key={game.id}>\r\n                                <img src={game.image} alt={game.name} />\r\n                            <Button onClick={() => this.setState({ redirect: `/${game.name}` })}>\r\n                            </Button>\r\n                            <GridListTileBar\r\n                                title={game.name}\r\n                                subtitle={ \r\n                                <Button onClick={() => this.setState({ redirect: `/playgame/${game.name}` })}>\r\n                                Play\r\n                                </Button>\r\n                                }\r\n                            />\r\n                        </GridListTile>\r\n                    ))}\r\n                </GridList>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(styles)(GameLibrary);","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\GameLibrary\\createLibrary.tsx",["129"],"import React from \"react\";\r\nimport CircleBlaster from \"../../assets/CircleBlaster.jpg\"\r\n\r\n    const gameData = [\r\n        {id:0, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:1, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:2, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:3, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:4, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:5, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:6, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:7, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:8, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:9, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:10, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:11, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:12, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:13, name: \"CircleBlaster\",image: CircleBlaster},\r\n    ]\r\n\r\n    export default gameData\r\n","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\GameLibrary\\GameDisplay.tsx",["130","131","132","133","134","135","136","137","138"],"import userEvent from \"@testing-library/user-event\";\r\nimport React from \"react\";\r\nimport { Route, Switch, BrowserRouter as Router, Redirect, matchPath } from \"react-router-dom\"\r\nimport CircleBlaster from \"../../Games/CircleBlaster\"\r\n\r\ntype myState = {\r\n    userScoreData: any;\r\n    token: string;\r\n    gameName: string;\r\n    score: number;\r\n    isUpdateScore: boolean;\r\n}\r\ntype myProps = {\r\n    token: string;\r\n}\r\n\r\nclass GameDisplay extends React.Component<myProps, myState> {\r\n    constructor(props: myProps) {\r\n        super(props)\r\n        this.state = {\r\n            token: this.props.token,\r\n            userScoreData: null,\r\n            isUpdateScore: true,\r\n            gameName: \"\",\r\n            score: 0,\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.state.userScoreData == null) {\r\n            this.getUserScore()\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if (this.state.userScoreData == null) {\r\n            this.getUserScore()\r\n        }\r\n    }\r\n\r\n    setGameData = (gameName: string, score: number) => {\r\n        this.setState({ gameName: gameName })\r\n        this.setState({ score: score })\r\n    }\r\n\r\n    createOrUpdateScore = (gameName: string, score: number) => {\r\n\r\n        console.log(gameName, score)\r\n        console.log(this.state.userScoreData.scores.length)\r\n        let body = {\r\n            gameName: gameName,\r\n            score: score,\r\n        }\r\n        if (this.state.userScoreData.scores.length == 0) {\r\n            console.log(\"1\")\r\n            fetch(\"http://localhost:3000/score/score\", {\r\n                method: \"Post\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": this.props.token!\r\n                },\r\n                body: JSON.stringify(body)\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => { this.setState({ userScoreData: data }) })\r\n                .catch(err => console.log(err))\r\n        } \r\n        \r\n        else if (this.state.userScoreData.scores.length > 0) \r\n        {\r\n            console.log(\"2\")\r\n\r\n            this.state.userScoreData.scores.map((game: any) => {\r\n                if (game.gameName == gameName) {\r\n                    console.log(game.gameName, gameName)\r\n                    this.setState({ isUpdateScore: false })\r\n                }\r\n            })\r\n\r\n        \r\n            if (!this.state.isUpdateScore) {\r\n                console.log(\"3\")\r\n\r\n                fetch(\"http://localhost:3000/score/score\", {\r\n                    method: \"Post\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": this.props.token!\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                })\r\n                    .then(res => res.json())\r\n                    .then(data => { this.setState({ isUpdateScore: true }); this.setState({ userScoreData: data }) })\r\n                    .catch(err => console.log(err))\r\n            } else {\r\n                console.log(\"4\")\r\n\r\n\r\n                fetch(\"http://localhost:3000/score/updateScore\", {\r\n                    method: \"PUT\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/json\",\r\n                        \"Authorization\": this.props.token!\r\n\r\n                    },\r\n                    body: JSON.stringify(body)\r\n                })\r\n                    .then(res => res.json())\r\n                    .then(data => { this.setState({ userScoreData: data }) })\r\n                    .catch(err => console.log(err))\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    getUserScore = () => {\r\n\r\n        fetch(\"http://localhost:3000/score/singleUserSorces\", {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": localStorage.getItem(\"token\")!\r\n            },\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => { console.log(data, \"Score Fetch\"); this.setState({ userScoreData: data }) })\r\n            .catch(err => console.log(err))\r\n    }\r\n\r\n\r\n    render() {\r\n        const path = matchPath(\"/playgame/1\", { path: \"/playgame/:id\" })\r\n        return (\r\n            <CircleBlaster createOrUpdateScore={this.createOrUpdateScore} />\r\n\r\n        )\r\n    }\r\n}\r\n\r\nexport default GameDisplay;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\CircleBlaster.jsx",["139","140","141","142","143","144"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport gsap from \"gsap\";\r\nimport \"./gameStyle.css\"\r\nimport { Button, Typography } from \"@material-ui/core\"\r\n\r\n\r\nconst CircleBlaster = (props) => {\r\n    let [score, setScore] = useState(0)\r\n    let [highScore, setHighScore] = useState(0)\r\n    let [isPlaying, setIsPlaying] = useState(false)\r\n    let [isSubmit, setIsSubmit] = useState(false)\r\n    let [gameOver, setGameOver] = useState(false)\r\n    const [projectiles, setProjectiles] = useState([])\r\n    const [enemies, setEnemies] = useState([])\r\n    const [particles, setParticles] = useState([])\r\n    const getWidth = () => window.innerWidth\r\n    const getHeight = () => window.innerHeight\r\n    let [width, setWidth] = useState(getWidth())\r\n    let [height, setHeight] = useState(getHeight())\r\n    let prevent = 1;\r\n\r\n    const canvasRef = useRef(null)\r\n    const friction = 0.99;\r\n    let player;\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        canvas.style.width = '100%';\r\n        canvas.style.height = '100%';\r\n        canvas.width = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n        canvasContext.fillStyle = \"rgba(0,0,0,1)\"\r\n        canvasContext.fillRect(0, 0, canvas.width, canvas.height)\r\n    }, [prevent])\r\n\r\n    useEffect(() => {\r\n        buildGame();\r\n    }, [isPlaying])\r\n\r\n\r\n    useEffect(() => {\r\n        const resizeListener = () => {\r\n            setWidth(getWidth())\r\n            setHeight(getHeight())\r\n        };\r\n        window.addEventListener(\"resize\", resizeListener)\r\n\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resizeListener)\r\n        }\r\n    }, [width, height])\r\n\r\n    class Player {\r\n        constructor(x, y, radius, color) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n        }\r\n\r\n        draw() {\r\n\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n    }\r\n\r\n    class Projectile {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n        update() {\r\n            this.draw()\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n        }\r\n    }\r\n\r\n\r\n    class Enemy {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n\r\n        update() {\r\n            this.draw()\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n        }\r\n\r\n    }\r\n\r\n    class Particle {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n            this.alpha = 1\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.save()\r\n            canvasContext.globalAlpha = this.alpha\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n            canvasContext.restore()\r\n        }\r\n\r\n        update() {\r\n            this.draw()\r\n            this.velocity.x *= friction\r\n            this.velocity.y *= friction\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n            this.alpha -= 0.01\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function setGameWindow() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        canvas.style.width = '100%';\r\n        canvas.style.height = '100%';\r\n        canvas.width = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n    }\r\n\r\n    function startGame() {\r\n        setIsPlaying(prevState => !prevState)\r\n\r\n    }\r\n\r\n    function buildGame() {\r\n        setGameWindow();\r\n\r\n        const canvas = canvasRef.current;\r\n\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n\r\n        const x = canvas.width / 2\r\n\r\n        const y = canvas.height / 2\r\n\r\n        player = new Player(x, y, 10, \"red\",)\r\n        spawnEnemies()\r\n        animate()\r\n    }\r\n\r\n\r\n    function spawnEnemies() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n\r\n        let newEnemies = enemies;\r\n        // const canvas = canvasRef.current;\r\n        // const canvasContext = canvasRef.current.getContext(\"2d\")\r\n        setInterval(() => {\r\n            const radius = Math.random() * (50 - 10) + 10\r\n\r\n            let x;\r\n            let y;\r\n\r\n            if (Math.random() < 0.5) {\r\n\r\n                x = Math.random() < 0.5 ? 0 - radius : canvas.width + radius\r\n                y = Math.random() * canvas.height\r\n            } else {\r\n                x = Math.random() * canvas.width\r\n                y = Math.random() < 0.5 ? 0 - radius : canvas.height + radius\r\n            }\r\n            const color = `hsl(${Math.random() * 360} , 50%, 50%)`\r\n\r\n            const angle = Math.atan2(\r\n                canvas.height / 2 - y,\r\n                canvas.width / 2 - x)\r\n            const velocity = {\r\n                x: Math.cos(angle),\r\n                y: Math.sin(angle)\r\n            }\r\n            newEnemies.push(new Enemy(x, y, radius, color, velocity))\r\n            setEnemies(newEnemies)\r\n        }, isPlaying ? 1000 : 1000000000)\r\n    }\r\n\r\n\r\n    function animate() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        let animeationId;\r\n        let newParticles = particles\r\n        let newProjectiles = projectiles\r\n        let newEnemies = enemies\r\n\r\n\r\n        animeationId = requestAnimationFrame(animate)\r\n        canvasContext.fillStyle = \"rgba(0,0,0,0.2)\"\r\n        canvasContext.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n        player.draw();\r\n\r\n        if (!isPlaying) {\r\n            cancelAnimationFrame(animeationId)\r\n        }\r\n        //create explosions\r\n        newParticles.forEach((particle, index) => {\r\n            if (particle.alpha <= 0) {\r\n                particles.splice(index, 1)\r\n                setParticles(newParticles)\r\n\r\n            } else {\r\n                particle.update()\r\n            }\r\n        });\r\n        //create projectiles\r\n        newProjectiles.forEach((projectile, index) => {\r\n            projectile.update()\r\n\r\n            if (projectile.x + projectile.radius < 0 ||\r\n                projectile.x - projectile.radius > canvas.width ||\r\n                projectile.y + projectile.radius < 0 ||\r\n                projectile.y - projectile.radius > canvas.height) {\r\n                setTimeout(() => {\r\n                    newProjectiles.splice(index, 1)\r\n                    setProjectiles(newProjectiles)\r\n                }, 0)\r\n            }\r\n\r\n        })\r\n\r\n        newEnemies.forEach((enemy, index) => {\r\n            enemy.update()\r\n\r\n            //gets the distance from an enemy to the player\r\n            const dist = Math.hypot(player.x - enemy.x, player.y - enemy.y)\r\n\r\n            if (dist - enemy.radius - player.radius < 1) {\r\n                cancelAnimationFrame(animeationId)\r\n                setGameOver(true)\r\n                setIsPlaying(false)\r\n            }\r\n\r\n            newProjectiles.forEach((projectile, pIndex) => {\r\n                const dist = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y)\r\n                //Peojectiles hit enemy\r\n                if (dist - enemy.radius - projectile.radius < 5) {\r\n\r\n\r\n                    //create explosions\r\n                    for (let i = 0; i < enemy.radius * 2; i++) {\r\n                        newParticles.push(new Particle(\r\n                            projectile.x, // spawn location projectiles x\r\n                            projectile.y, // spawn location projectiles y\r\n                            Math.random() * 2, //radius(size) of particle\r\n                            enemy.color, { //makes explosion same color as enemy\r\n                            x: (Math.random() - 0.5) * (Math.random() * 8),//x volocity\r\n                            y: (Math.random() - 0.5) * (Math.random() * 8) //y volocity\r\n                        }))\r\n                    }\r\n                    setParticles(newParticles)\r\n\r\n                    if (enemy.radius - 10 > 5) {\r\n                        //the score\r\n                        setScore(score += 100)\r\n                        gsap.to(enemy, { radius: enemy.radius - 10 })\r\n                        setTimeout(() => {\r\n                            newProjectiles.splice(pIndex, 1)\r\n                            setProjectiles(newProjectiles)\r\n                        }, 0)\r\n                    }\r\n                    else {\r\n                        setScore(score += 250)\r\n                        setTimeout(() => {\r\n                            newEnemies.splice(index, 1)\r\n                            newProjectiles.splice(pIndex, 1)\r\n                            setEnemies(newEnemies)\r\n                            setProjectiles(newProjectiles)\r\n                        }, 0)\r\n                    }\r\n                }\r\n\r\n            })\r\n        })\r\n    }\r\n\r\n    function handleClick(event) {\r\n        const canvas = canvasRef.current\r\n        let newProjectiles = projectiles\r\n        const angle = Math.atan2(\r\n            event.clientY - height / 2,\r\n            event.clientX - width / 2)\r\n        const velocity = {\r\n            x: Math.cos(angle) * 5,\r\n            y: Math.sin(angle) * 5\r\n        }\r\n        newProjectiles.push(\r\n            new Projectile(\r\n                canvas.width / 2,\r\n                canvas.height / 2,\r\n                5,\r\n                \"white\",\r\n                velocity\r\n            )\r\n        )\r\n        setProjectiles(newProjectiles)\r\n\r\n    }\r\n\r\n    function newGame(){\r\n        setProjectiles([])\r\n        setEnemies([])\r\n        setParticles([])\r\n        setIsPlaying(true)\r\n        setGameOver(false)\r\n    }\r\n\r\n    function submitScore(){\r\n        if(!isSubmit){\r\n            props.createOrUpdateScore(\"CircleBlaster\", score)\r\n            setIsSubmit(true)\r\n        }\r\n    }\r\n\r\n    function displayInfo() {\r\n        if (!isPlaying && gameOver) {\r\n            return (\r\n                <div className=\"gameInfo\">\r\n                    <Typography>Game Over!</Typography>\r\n                    <Typography className=\"warning\">this game dose not work well when not full screen! Also plenty of little bugs</Typography>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => newGame()}>New Game</Button>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => submitScore()}>{isSubmit ? \"Score updated!\": \"Update Score\"}</Button>\r\n\r\n                </div>\r\n            )\r\n        } else if (!isPlaying) {\r\n            return (\r\n\r\n                <div className=\"gameInfo\">\r\n                    <Typography>Welcome to CircleBlaster!</Typography>\r\n                    <Typography>Click on the screen to fire at the enemies!</Typography>\r\n                    <Typography>its all over once they crash into you! destroy them before that happens!!</Typography>\r\n                    <Typography className=\"warning\">this game dose not work well when not full screen! Also plenty of litle bugs</Typography>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => startGame()}>Play Game</Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"score\">\r\n                <span>Score:  </span>\r\n                <span>{score}</span>\r\n            </div>\r\n            <canvas ref={canvasRef}{...props} onClick={(e) => handleClick(e)}></canvas>\r\n            {displayInfo()}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default CircleBlaster;\r\n",["145","146"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Admin\\AdminMenu.tsx",["147","148"],{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"154","line":5,"column":17,"nodeType":"155","messageId":"156","endLine":5,"endColumn":30},{"ruleId":"153","severity":1,"message":"157","line":5,"column":50,"nodeType":"155","messageId":"156","endLine":5,"endColumn":54},{"ruleId":"153","severity":1,"message":"158","line":6,"column":16,"nodeType":"155","messageId":"156","endLine":6,"endColumn":22},{"ruleId":"159","severity":1,"message":"160","line":83,"column":33,"nodeType":"161","messageId":"162","endLine":83,"endColumn":35},{"ruleId":"153","severity":1,"message":"163","line":3,"column":8,"nodeType":"155","messageId":"156","endLine":3,"endColumn":12},{"ruleId":"153","severity":1,"message":"164","line":2,"column":8,"nodeType":"155","messageId":"156","endLine":2,"endColumn":13},{"ruleId":"153","severity":1,"message":"165","line":4,"column":10,"nodeType":"155","messageId":"156","endLine":4,"endColumn":18},{"ruleId":"153","severity":1,"message":"166","line":4,"column":20,"nodeType":"155","messageId":"156","endLine":4,"endColumn":26},{"ruleId":"153","severity":1,"message":"163","line":4,"column":22,"nodeType":"155","messageId":"156","endLine":4,"endColumn":26},{"ruleId":"153","severity":1,"message":"163","line":3,"column":8,"nodeType":"155","messageId":"156","endLine":3,"endColumn":12},{"ruleId":"153","severity":1,"message":"167","line":17,"column":10,"nodeType":"155","messageId":"156","endLine":17,"endColumn":18},{"ruleId":"153","severity":1,"message":"168","line":17,"column":20,"nodeType":"155","messageId":"156","endLine":17,"endColumn":24},{"ruleId":"159","severity":1,"message":"160","line":109,"column":43,"nodeType":"161","messageId":"162","endLine":109,"endColumn":45},{"ruleId":"159","severity":1,"message":"160","line":117,"column":31,"nodeType":"161","messageId":"162","endLine":117,"endColumn":33},{"ruleId":"159","severity":1,"message":"160","line":192,"column":84,"nodeType":"161","messageId":"162","endLine":192,"endColumn":86},{"ruleId":"159","severity":1,"message":"160","line":237,"column":54,"nodeType":"161","messageId":"162","endLine":237,"endColumn":56},{"ruleId":"153","severity":1,"message":"169","line":4,"column":8,"nodeType":"155","messageId":"156","endLine":4,"endColumn":21},{"ruleId":"153","severity":1,"message":"170","line":13,"column":8,"nodeType":"155","messageId":"156","endLine":13,"endColumn":16},{"ruleId":"153","severity":1,"message":"167","line":16,"column":10,"nodeType":"155","messageId":"156","endLine":16,"endColumn":18},{"ruleId":"159","severity":1,"message":"160","line":75,"column":72,"nodeType":"161","messageId":"162","endLine":75,"endColumn":74},{"ruleId":"153","severity":1,"message":"154","line":1,"column":26,"nodeType":"155","messageId":"156","endLine":1,"endColumn":39},{"ruleId":"153","severity":1,"message":"171","line":2,"column":10,"nodeType":"155","messageId":"156","endLine":2,"endColumn":16},{"ruleId":"153","severity":1,"message":"172","line":2,"column":18,"nodeType":"155","messageId":"156","endLine":2,"endColumn":24},{"ruleId":"153","severity":1,"message":"173","line":3,"column":10,"nodeType":"155","messageId":"156","endLine":3,"endColumn":22},{"ruleId":"153","severity":1,"message":"171","line":3,"column":10,"nodeType":"155","messageId":"156","endLine":3,"endColumn":16},{"ruleId":"153","severity":1,"message":"172","line":3,"column":18,"nodeType":"155","messageId":"156","endLine":3,"endColumn":24},{"ruleId":"153","severity":1,"message":"174","line":2,"column":31,"nodeType":"155","messageId":"156","endLine":2,"endColumn":41},{"ruleId":"153","severity":1,"message":"175","line":1,"column":8,"nodeType":"155","messageId":"156","endLine":1,"endColumn":13},{"ruleId":"153","severity":1,"message":"176","line":1,"column":8,"nodeType":"155","messageId":"156","endLine":1,"endColumn":17},{"ruleId":"153","severity":1,"message":"177","line":3,"column":10,"nodeType":"155","messageId":"156","endLine":3,"endColumn":15},{"ruleId":"153","severity":1,"message":"178","line":3,"column":17,"nodeType":"155","messageId":"156","endLine":3,"endColumn":23},{"ruleId":"153","severity":1,"message":"179","line":3,"column":42,"nodeType":"155","messageId":"156","endLine":3,"endColumn":48},{"ruleId":"153","severity":1,"message":"167","line":3,"column":50,"nodeType":"155","messageId":"156","endLine":3,"endColumn":58},{"ruleId":"159","severity":1,"message":"160","line":54,"column":52,"nodeType":"161","messageId":"162","endLine":54,"endColumn":54},{"ruleId":"180","severity":1,"message":"181","line":73,"column":61,"nodeType":"182","messageId":"183","endLine":73,"endColumn":63},{"ruleId":"159","severity":1,"message":"160","line":74,"column":35,"nodeType":"161","messageId":"162","endLine":74,"endColumn":37},{"ruleId":"153","severity":1,"message":"184","line":132,"column":15,"nodeType":"155","messageId":"156","endLine":132,"endColumn":19},{"ruleId":"185","severity":1,"message":"186","line":9,"column":10,"nodeType":"155","messageId":"156","endLine":9,"endColumn":19},{"ruleId":"185","severity":1,"message":"187","line":9,"column":21,"nodeType":"155","messageId":"156","endLine":9,"endColumn":33},{"ruleId":"188","severity":1,"message":"189","line":39,"column":8,"nodeType":"190","endLine":39,"endColumn":19,"suggestions":"191"},{"ruleId":"185","severity":1,"message":"192","line":181,"column":15,"nodeType":"155","messageId":"156","endLine":181,"endColumn":28},{"ruleId":"185","severity":1,"message":"192","line":198,"column":15,"nodeType":"155","messageId":"156","endLine":198,"endColumn":28},{"ruleId":"185","severity":1,"message":"192","line":212,"column":15,"nodeType":"155","messageId":"156","endLine":212,"endColumn":28},{"ruleId":"149","replacedBy":"150"},{"ruleId":"151","replacedBy":"152"},{"ruleId":"153","severity":1,"message":"193","line":2,"column":157,"nodeType":"155","messageId":"156","endLine":2,"endColumn":171},{"ruleId":"159","severity":1,"message":"160","line":82,"column":38,"nodeType":"161","messageId":"162","endLine":82,"endColumn":40},"no-native-reassign",["194"],"no-negated-in-lhs",["195"],"@typescript-eslint/no-unused-vars","'ThemeProvider' is defined but never used.","Identifier","unusedVar","'fade' is defined but never used.","'Button' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Grid' is defined but never used.","'Paper' is defined but never used.","'DataGrid' is defined but never used.","'ColDef' is defined but never used.","'Redirect' is defined but never used.","'Link' is defined but never used.","'ListSubheader' is defined but never used.","'SendIcon' is defined but never used.","'orange' is defined but never used.","'yellow' is defined but never used.","'DensityTypes' is defined but never used.","'makeStyles' is defined but never used.","'React' is defined but never used.","'userEvent' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'Router' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'path' is assigned a value but never used.","no-unused-vars","'highScore' is assigned a value but never used.","'setHighScore' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'buildGame'. Either include it or remove the dependency array.","ArrayExpression",["196"],"'canvasContext' is assigned a value but never used.","'createMuiTheme' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"197","fix":"198"},"Update the dependencies array to be: [buildGame, isPlaying]",{"range":"199","text":"200"},[1394,1405],"[buildGame, isPlaying]"]