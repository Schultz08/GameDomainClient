[{"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\index.tsx":"1","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\reportWebVitals.ts":"2","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\App.tsx":"3","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\index.tsx":"4","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Auth\\Auth.tsx":"5","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\myGame.jsx":"6","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoards.tsx":"7","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoardDisplay.tsx":"8","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\Message.tsx":"9","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\MessageDisplay.tsx":"10","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Nav\\SideNav.tsx":"11","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\SendMessage.tsx":"12","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\index.tsx":"13","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\sunsetTheme.tsx":"14","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\mainTheme.tsx":"15","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\darkTheme.tsx":"16","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\ReplyMessage.tsx":"17","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\UpdateMessage.tsx":"18"},{"size":500,"mtime":499162500000,"results":"19","hashOfConfig":"20"},{"size":425,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":5256,"mtime":1610335038663,"results":"22","hashOfConfig":"20"},{"size":349,"mtime":1610236985840,"results":"23","hashOfConfig":"20"},{"size":5429,"mtime":1610165961833,"results":"24","hashOfConfig":"20"},{"size":11712,"mtime":1609962404875,"results":"25","hashOfConfig":"20"},{"size":684,"mtime":1609172966155,"results":"26","hashOfConfig":"20"},{"size":1425,"mtime":1610062302468,"results":"27","hashOfConfig":"20"},{"size":4811,"mtime":1610339640891,"results":"28","hashOfConfig":"20"},{"size":15149,"mtime":1610342273128,"results":"29","hashOfConfig":"20"},{"size":6299,"mtime":1610333386591,"results":"30","hashOfConfig":"20"},{"size":5879,"mtime":1610340684090,"results":"31","hashOfConfig":"20"},{"size":155,"mtime":1610232139079,"results":"32","hashOfConfig":"20"},{"size":420,"mtime":1610261613856,"results":"33","hashOfConfig":"20"},{"size":2384,"mtime":1610335557659,"results":"34","hashOfConfig":"20"},{"size":448,"mtime":1610336074330,"results":"35","hashOfConfig":"20"},{"size":3695,"mtime":1610340527834,"results":"36","hashOfConfig":"20"},{"size":3768,"mtime":1610342265610,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1g8q9lt",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"40"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"40"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"40"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"62","usedDeprecatedRules":"40"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"65","messages":"66","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"67","usedDeprecatedRules":"40"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"40"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79","usedDeprecatedRules":"40"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\index.tsx",[],["84","85"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\reportWebVitals.ts",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\App.tsx",["86","87","88","89"],"import React from 'react';\r\nimport { Auth, LeaderBoards, Message, SideNav, SendMessage, ReplyMessage } from \"./Components\"\r\nimport myGame from \"./Games/myGame\"\r\nimport { Route, Switch, BrowserRouter as Router } from \"react-router-dom\"\r\nimport { withStyles, makeStyles, createStyles } from '@material-ui/core/styles';\r\nimport { Theme, ThemeProvider, MuiThemeProvider } from '@material-ui/core/styles';\r\nimport { Grid, Button, CssBaseline} from \"@material-ui/core\"\r\nimport * as themes from \"./theme\"\r\n\r\nimport Video from \"./assets/GameVid.mp4\"\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n  root: {\r\n    flexGrow: 1,\r\n    marginTop: \"5rem\",\r\n    display: \"flex\",\r\n  },\r\n  sidenav: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    margin: \"1rem\",\r\n    height: \"100%\",\r\n    minWidth: \"240px\",\r\n    maxWidth: \"277px\",\r\n    maxHeight: \"800px\",\r\n  },\r\n  center: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    margin: \"1rem\",\r\n    height: \"100%\",\r\n    minWidth: \"240px\",\r\n    maxHeight: \"800px\",\r\n    overflow: \"auto\",\r\n  },\r\n  leaderboard: {\r\n    padding: theme.spacing(2),\r\n    textAlign: 'center',\r\n    margin: \"1rem\",\r\n    height: \"100%\",\r\n    minWidth: \"240px\",\r\n    maxWidth: \"277px\",\r\n    maxHeight: \"800px\",\r\n    overflow: \"auto\"\r\n  },\r\n  backgroundVideo: {\r\n    position: \"absolute\",\r\n    left: 0,\r\n    top: 0\r\n  },\r\n  title: {\r\n    position: \"absolute\",\r\n    color: \"white\",\r\n    zIndex: 100,\r\n    marginLeft: \"5rem\",\r\n    fontSize: \"5rem\"\r\n  }\r\n});\r\n\r\ntype myState = {\r\n  token: string | null;\r\n  theme: string | null;\r\n}\r\n\r\ntype myProps = {\r\n  classes: any;\r\n}\r\n\r\n\r\nclass App extends React.Component<myProps, myState>{\r\n  constructor(props: myProps) {\r\n    super(props)\r\n    this.state = {\r\n      token: \"\",\r\n      theme: localStorage.getItem(\"theme\") ? localStorage.getItem(\"theme\") : \"mainTheme\",\r\n    }\r\n  }\r\n\r\n  componentDidMount() {\r\n    let token = localStorage.getItem(\"token\");\r\n    this.setState({ token: token });\r\n\r\n    if (!localStorage.getItem(\"theme\") && this.state.token) {\r\n      fetch(`http://localhost:3000/user/theme`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": localStorage.getItem(\"token\")!\r\n        }\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          this.setState({ theme: data })\r\n          localStorage.setItem(\"theme\", data)\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (this.state.token !== localStorage.getItem(\"token\")) {\r\n      this.setState({ token: localStorage.getItem(\"token\") })\r\n    }\r\n\r\n    if (!localStorage.getItem(\"theme\") && this.state.token) {\r\n      fetch(`http://localhost:3000/user/theme`, {\r\n        method: \"GET\",\r\n        headers: {\r\n          \"Content-Type\": \"application/json\",\r\n          \"Authorization\": localStorage.getItem(\"token\")!\r\n        }\r\n      })\r\n        .then((res) => res.json())\r\n        .then((data) => {\r\n          this.setState({ theme: data })\r\n          localStorage.setItem(\"theme\", data)\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n  }\r\n\r\n  updateToken = (token: string) => {\r\n    this.setState({ token: token })\r\n  }\r\n\r\n  clearToken = () => {\r\n    this.setState({ token: \"\" })\r\n  }\r\n\r\n  getTheme = () => {\r\n    switch (this.state.theme) {\r\n      case \"darkTheme\":\r\n        return themes.darkTheme\r\n      case \"main\":\r\n        return themes.mainTheme\r\n      case \"sunset\":\r\n        return themes.sunsetTheme\r\n      default:\r\n        return themes.mainTheme\r\n    }\r\n\r\n  }\r\n\r\n  render() {\r\n    const { classes } = this.props;\r\n    const theme = this.getTheme()\r\n    return (\r\n      <MuiThemeProvider theme={theme}>\r\n        <CssBaseline/>\r\n        <div className={classes.root}>\r\n          <Grid container justify=\"center\" direction=\"row\" alignItems=\"center\" >\r\n            <Grid container item xs className={classes.sidenav}>\r\n              <SideNav token={this.state.token} clearToken={this.clearToken} />\r\n            </Grid>\r\n            <Grid container item xs className={classes.center}>\r\n              <Router>\r\n                <Switch>\r\n                  <Route path=\"/\" exact>\r\n                    <h1 className={classes.title}>GameDomain</h1>\r\n                    <video autoPlay loop muted>\r\n                      <source src={Video} type='video/mp4' />\r\n                    </video>\r\n                  </Route>\r\n                  <Route path=\"/game\" component={myGame} />\r\n                  <Route path=\"/login\"><Auth updateToken={this.updateToken} /></Route>\r\n                  <Route path=\"/leaderBoard\" component={LeaderBoards} />\r\n                  <Route path=\"/message\"> <Message token={this.state.token} /></Route>\r\n                  <Route path=\"/sendmessage\"> <SendMessage token={this.state.token} /></Route>\r\n                  {/* <Route path=\"/replymessage\"> <ReplyMessage token={this.state.token} /></Route> */}\r\n                </Switch>\r\n              </Router>\r\n            </Grid>\r\n            <Grid container item xs className={classes.leaderboard}>\r\n              <LeaderBoards />\r\n            </Grid>\r\n          </Grid>\r\n        </div>\r\n      </MuiThemeProvider>\r\n    );\r\n  }\r\n}\r\n\r\nexport default withStyles(styles)(App);\r\n","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\index.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Auth\\Auth.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\myGame.jsx",["90","91","92","93"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport gsap from \"gsap\";\r\nimport \"./gameStyle.css\"\r\n\r\nconst Canvas = props => {\r\n    let [score, setScore] = useState(0)\r\n    let [isPlaying, setIsPlaying] = useState(false)\r\n    const [projectiles, setProjectiles] = useState([])\r\n    const [enemies, setEnemies] = useState([])\r\n    const [particles, setParticles] = useState([])\r\n    const getWidth = () => window.innerWidth\r\n    const getHeight = () => window.innerHeight\r\n    let [width, setWidth] = useState(getWidth())\r\n    let [height, setHeight] = useState(getHeight())\r\n    let prevent = 1;\r\n\r\n    const canvasRef = useRef(null)\r\n    const friction = 0.99;\r\n    let player;\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        canvas.style.width ='100%';\r\n        canvas.style.height='100%';\r\n        canvas.width  = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n        canvasContext.fillStyle = \"rgba(0,0,0,1)\"\r\n        canvasContext.fillRect(0, 0, canvas.width, canvas.height)\r\n    },[prevent])\r\n\r\n    useEffect(() => {\r\n        buildGame();\r\n    },[isPlaying])\r\n\r\n\r\n    useEffect(() => {\r\n        const resizeListener = () => {\r\n            setWidth(getWidth())\r\n            setHeight(getHeight())\r\n        };\r\n        window.addEventListener(\"resize\", resizeListener)\r\n\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resizeListener)\r\n        }\r\n    },[width, height])\r\n\r\n    class Player {\r\n        constructor(x, y, radius, color) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n        }\r\n\r\n        draw() {\r\n\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n    }\r\n\r\n    class Projectile {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n        update() {\r\n            this.draw()\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n        }\r\n    }\r\n\r\n\r\n    class Enemy {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n\r\n        update() {\r\n            this.draw()\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n        }\r\n\r\n    }\r\n\r\n    class Particle {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n            this.alpha = 1\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.save()\r\n            canvasContext.globalAlpha = this.alpha\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n            canvasContext.restore()\r\n        }\r\n\r\n        update() {\r\n            this.draw()\r\n            this.velocity.x *= friction\r\n            this.velocity.y *= friction\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n            this.alpha -= 0.01\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function setGameWindow(){\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        canvas.style.width ='100%';\r\n        canvas.style.height='100%';\r\n        canvas.width  = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n    }\r\n\r\n    function startGame() {\r\n        setIsPlaying(prevState => !prevState)\r\n        \r\n    }\r\n    \r\n    function buildGame() {\r\n        setGameWindow();\r\n        console.log(\"1\",isPlaying)\r\n\r\n        const canvas = canvasRef.current;\r\n        console.log(\"2\",isPlaying)\r\n\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        console.log(\"3\",isPlaying)\r\n\r\n        const x = canvas.width / 2\r\n        console.log(\"4\",isPlaying)\r\n\r\n        const y = canvas.height / 2\r\n        console.log(\"5\",isPlaying)\r\n\r\n        player = new Player(x, y, 10, \"red\",)\r\n        console.log(\"6\",isPlaying)\r\n\r\n        spawnEnemies()\r\n        animate()\r\n    }\r\n\r\n\r\n    function spawnEnemies() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n\r\n        let newEnemies = enemies;\r\n        // const canvas = canvasRef.current;\r\n        // const canvasContext = canvasRef.current.getContext(\"2d\")\r\n        setInterval(() => {\r\n            const radius = Math.random() * (50 - 10) + 10\r\n\r\n            let x;\r\n            let y;\r\n\r\n            if (Math.random() < 0.5) {\r\n\r\n                x = Math.random() < 0.5 ? 0 - radius : canvas.width + radius\r\n                y = Math.random() * canvas.height\r\n            } else {\r\n                x = Math.random() * canvas.width\r\n                y = Math.random() < 0.5 ? 0 - radius : canvas.height + radius\r\n            }\r\n            const color = `hsl(${Math.random() * 360} , 50%, 50%)`\r\n\r\n            const angle = Math.atan2(\r\n                canvas.height / 2 - y,\r\n                canvas.width / 2 - x)\r\n            const velocity = {\r\n                x: Math.cos(angle),\r\n                y: Math.sin(angle)\r\n            }\r\n            newEnemies.push(new Enemy(x, y, radius, color, velocity))\r\n            setEnemies(newEnemies)\r\n        }, 1000)\r\n    }\r\n\r\n\r\n    function animate() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        let animeationId;\r\n        let newParticles = particles\r\n        let newProjectiles = projectiles\r\n        let newEnemies = enemies\r\n\r\n\r\n        animeationId = requestAnimationFrame(animate)\r\n        canvasContext.fillStyle = \"rgba(0,0,0,0.2)\"\r\n        canvasContext.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n        player.draw();\r\n\r\n        if(!isPlaying){\r\n            cancelAnimationFrame(animeationId)\r\n        }\r\n        //create explosions\r\n        newParticles.forEach((particle, index) => {\r\n            if (particle.alpha <= 0) {\r\n                particles.splice(index, 1)\r\n                setParticles(newParticles)\r\n\r\n            } else {\r\n                particle.update()\r\n            }\r\n        });\r\n        //create projectiles\r\n        newProjectiles.forEach((projectile, index) => {\r\n            projectile.update()\r\n\r\n            if (projectile.x + projectile.radius < 0 ||\r\n                projectile.x - projectile.radius > canvas.width ||\r\n                projectile.y + projectile.radius < 0 ||\r\n                projectile.y - projectile.radius > canvas.height) {\r\n                setTimeout(() => {\r\n                    newProjectiles.splice(index, 1)\r\n                    setProjectiles(newProjectiles)\r\n                }, 0)\r\n            }\r\n\r\n        })\r\n\r\n        newEnemies.forEach((enemy, index) => {\r\n            enemy.update()\r\n\r\n            //gets the distance from an enemy to the player\r\n            const dist = Math.hypot(player.x - enemy.x, player.y - enemy.y)\r\n\r\n            if (dist - enemy.radius - player.radius < 1) {\r\n                cancelAnimationFrame(animeationId)\r\n            }\r\n\r\n            newProjectiles.forEach((projectile, pIndex) => {\r\n                const dist = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y)\r\n                //Peojectiles hit enemy\r\n                if (dist - enemy.radius - projectile.radius < 5) {\r\n\r\n\r\n                    //create explosions\r\n                    for (let i = 0; i < enemy.radius * 2; i++) {\r\n                        newParticles.push(new Particle(\r\n                            projectile.x, // spawn location projectiles x\r\n                            projectile.y, // spawn location projectiles y\r\n                            Math.random() * 2, //radius(size) of particle\r\n                            enemy.color, { //makes explosion same color as enemy\r\n                            x: (Math.random() - 0.5) * (Math.random() * 8),//x volocity\r\n                            y: (Math.random() - 0.5) * (Math.random() * 8) //y volocity\r\n                        }))\r\n                    }\r\n                    setParticles(newParticles)\r\n\r\n                    if (enemy.radius - 10 > 5) {\r\n                        //the score\r\n                        setScore(score += 100)\r\n                        gsap.to(enemy, { radius: enemy.radius - 10 })\r\n                        setTimeout(() => {\r\n                            newProjectiles.splice(pIndex, 1)\r\n                            setProjectiles(newProjectiles)\r\n                        }, 0)\r\n                    }\r\n                    else {\r\n                        setScore(score += 250)\r\n                        setTimeout(() => {\r\n                            newEnemies.splice(index, 1)\r\n                            newProjectiles.splice(pIndex, 1)\r\n                            setEnemies(newEnemies)\r\n                            setProjectiles(newProjectiles)\r\n                        }, 0)\r\n                    }\r\n                }\r\n\r\n            })\r\n        })\r\n    }\r\n\r\n    function handleClick(event) {\r\n        const canvas = canvasRef.current\r\n        let newProjectiles = projectiles\r\n        const angle = Math.atan2(\r\n            event.clientY - height / 2,\r\n            event.clientX -  width / 2)\r\n        const velocity = {\r\n            x: Math.cos(angle) * 5,\r\n            y: Math.sin(angle) * 5\r\n        }\r\n        newProjectiles.push(\r\n            new Projectile(\r\n                canvas.width / 2,\r\n                canvas.height / 2,\r\n                5,\r\n                \"white\",\r\n                velocity\r\n            )\r\n        )\r\n        setProjectiles(newProjectiles)\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"score\">\r\n                <span>Score:  </span>\r\n                <span>{score}</span>\r\n            </div>\r\n            <canvas ref={canvasRef}{...props} onClick={(e) => handleClick(e)}></canvas>\r\n            <button onClick={() => startGame()} className=\"thebutton\">The Button</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Canvas;\r\n",["94","95"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoards.tsx",["96"],"import React from \"react\";\r\nimport LeaderBoardsDisplay from \"./LeaderBoardDisplay\"\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass LeaderBoards extends React.Component {\r\n    state ={\r\n        players: []\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(`http://localhost:3000/score/allScores/`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.setState({players: data}))\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <LeaderBoardsDisplay players={this.state.players}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LeaderBoards;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoardDisplay.tsx",["97","98"],"import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { DataGrid, ColDef } from '@material-ui/data-grid';\r\n\r\nconst useStyle = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: \"center\",\r\n            color: theme.palette.text.primary\r\n        }\r\n\r\n    })\r\n)\r\n\r\n\r\nconst LeaderBoardsDisplay = (props: any) => {\r\n    const classes = useStyle();\r\n    return (\r\n        <div className={classes.root}>\r\n            \r\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                {\r\n                    props.players.map((player: any, index: number) => {\r\n                        return (\r\n                            <Grid item xs key={index}>\r\n                                <Paper className={classes.paper}>\r\n                                    {player.gameName}<br/>\r\n                                    {player.user.userName}<br/>\r\n                                    {player.score}\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LeaderBoardsDisplay;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\Message.tsx",["99"],"import React from \"react\";\r\nimport MessageDisplay from \"./MessageDisplay\"\r\nimport {Redirect} from \"react-router-dom\"\r\nimport { Typography, Grid, withStyles, Theme, createStyles } from \"@material-ui/core\";\r\n\r\nconst styles = (theme:Theme) => createStyles({\r\n    \r\n    root: {\r\n            width: '100%',\r\n          },\r\n  });\r\n\r\ntype myProps = {\r\n    token: string | null;\r\n    classes: any;\r\n}\r\n\r\ntype myState = {\r\n    conversation: any | null;\r\n    redirect: string;\r\n    loggedInUserId: number | null;\r\n}\r\n\r\n\r\nclass Message extends React.Component<myProps, myState> {\r\n    constructor(props: myProps) {\r\n        super(props)\r\n        this.state = {\r\n            conversation: null,\r\n            redirect: \"\",\r\n            loggedInUserId: null,\r\n        }\r\n    }\r\n    \r\n\r\n    componentDidMount(){\r\n        if(this.state.conversation == null){\r\n            this.getMail()\r\n        }\r\n\r\n    }\r\n\r\n    componentDidUpdate(){\r\n        if(this.state.conversation == null){\r\n            this.getMail()\r\n        }\r\n    }\r\n\r\n    getMail = () => {\r\n\r\n        fetch(`http://localhost:3000/message/getMail`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": localStorage.getItem(\"token\")!\r\n            }\r\n        })\r\n            .then((res) => res.json())\r\n            .then((data) => { console.log(data, \"Fetch\"); this.setState({loggedInUserId: data.receivingId});this.setState({ conversation: data })})\r\n            .catch(err => console.log(err))\r\n\r\n    }\r\n\r\n    deleteMessage = (id: number, isReplyMessage: boolean) => {\r\n        if(isReplyMessage){\r\n            fetch(`http://localhost:3000/reply/deleteReply/${id}`, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": localStorage.getItem(\"token\")!\r\n                }\r\n            })\r\n            .catch(err => console.log(err)) \r\n            this.setState({conversation: null})\r\n        }else{\r\n            fetch(`http://localhost:3000/message/deleteMessage/${id}`, {\r\n                method: \"DELETE\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": localStorage.getItem(\"token\")!\r\n                }\r\n            })\r\n            .catch(err => console.log(err))\r\n            this.setState({conversation: null})\r\n        }\r\n    }\r\n\r\n    updateMessage = (message: any) => {\r\n            console.log(message, \"updateMessage\")\r\n            let messageId = message.id\r\n            let body = {\r\n                messageBody: message.messageBody\r\n            }\r\n            fetch(`http://localhost:3000/message/updateMessage/${messageId}`, {\r\n                method: \"PUT\",\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": localStorage.getItem(\"token\")!\r\n                },\r\n                body: JSON.stringify(body)\r\n            })\r\n                .then(res => res.json())\r\n                .then(data => {\r\n                    this.setState({ redirect: \"/message\" })\r\n                })\r\n                .catch(err => console.log(err))\r\n\r\n    }\r\n\r\n    displayConductor = (classes: any) => {\r\n        if(!this.state.conversation){\r\n            console.log(\"fetch from conduct\")\r\n        }\r\n        console.log(this.state.conversation, \"displayconduct 1\")\r\n        if (this.state.conversation !== undefined && this.state.conversation !== null && this.state.conversation && this.state.conversation.messages.length > 0) {\r\n            console.log(this.state.conversation, \"displayconductor\")\r\n            return (\r\n                <div className={classes.root}>\r\n                <Typography  variant=\"h3\" >Inbox</Typography>\r\n            <MessageDisplay \r\n            token={this.props.token!} \r\n            conversation={this.state.conversation} \r\n            deleteMessage={this.deleteMessage} \r\n            loggedInUserId={this.state.loggedInUserId}\r\n            />\r\n                </div>\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                <Typography  variant=\"h3\" >Inbox</Typography>\r\n                    <h1>You have no Mail!!</h1>\r\n                    <button onClick={this.handleClick}>Create New Message</button>\r\n                    \r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    handleClick = () => {\r\n        this.setState({redirect: \"/sendmessage\"})\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props\r\n        if (this.state.redirect) {\r\n            return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n                this.displayConductor(classes)\r\n        )\r\n    }\r\n}\r\n\r\nexport default withStyles(styles)(Message)","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\MessageDisplay.tsx",["100","101","102","103","104","105","106"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Nav\\SideNav.tsx",["107","108","109"],"import React from \"react\";\r\nimport { Theme } from '@material-ui/core/styles';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport {Link} from \"@material-ui/core\" \r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport StarBorder from '@material-ui/icons/StarBorder';\r\n\r\n\r\nconst styles = (theme:Theme) => ({\r\n    root: {\r\n            width: '100%',\r\n            maxWidth: 360,\r\n          },\r\n          nested: {\r\n            paddingLeft: theme.spacing(4),\r\n          },\r\n  });\r\n\r\ntype myProps = {\r\n    token: string | null;\r\n    classes: any;\r\n    clearToken(): void;\r\n}\r\ntype myState = {\r\n    isLoggedIn: boolean;\r\n    open: boolean;\r\n    token: string | null;\r\n}\r\n  \r\n     \r\n  class SideNav extends React.Component<myProps, myState>{\r\n      constructor(props: myProps){\r\n          super(props)\r\n          this.state = {\r\n            isLoggedIn: false,\r\n            open: false,\r\n            token: \"\"\r\n            }\r\n        }\r\n\r\n        componentDidMount(){\r\n          if(localStorage.getItem(\"token\")){\r\n            this.setState({isLoggedIn: true})\r\n            this.setState({token: localStorage.getItem(\"token\")})\r\n          }else{\r\n            this.setState({isLoggedIn:false})\r\n            this.setState({token: \"\"})\r\n          }\r\n              // if(this.props.token){\r\n              //      this.setState({isLoggedIn: true})\r\n              //      this.setState({token: this.props.token})\r\n              // }else{\r\n              //      this.setState({isLoggedIn: false})\r\n              //      this.setState({token: this.props.token})\r\n              // }\r\n        }\r\n\r\n        componentDidUpdate(){\r\n          console.log(\"did update\")\r\n          if(localStorage.getItem(\"token\") !== this.state.token){\r\n            this.setState({isLoggedIn: true})\r\n            this.setState({token: localStorage.getItem(\"token\")}) \r\n          }else if(!localStorage.getItem(\"token\") && this.state.isLoggedIn == true){\r\n            this.setState({isLoggedIn: false})\r\n            this.setState({token: localStorage.getItem(\"token\")})\r\n          }\r\n      //     if(this.props.token !== this.state.token){\r\n      //       this.setState({isLoggedIn: true})\r\n      //       this.setState({token: this.props.token})\r\n      //  }else if(!this.props.token && this.state.isLoggedIn == true){\r\n      //       this.setState({isLoggedIn: false})\r\n      //       this.setState({token: this.props.token})\r\n      //  }\r\n        }\r\n\r\n        loginDisplay = (classes:any) =>{\r\n            if(this.state.isLoggedIn){\r\n              return(\r\n                <div>\r\n        \r\n                <ListItem button onClick={this.handleClick}>\r\n                <ListItemIcon>\r\n                  <DraftsIcon/>\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Mail\" />\r\n                {this.state.open ? <ExpandLess /> : <ExpandMore />}\r\n              </ListItem>\r\n              <Collapse in={this.state.open} timeout=\"auto\" unmountOnExit>\r\n                <List component=\"div\" disablePadding>\r\n                  <Link color=\"inherit\" href=\"/message\">\r\n                  <ListItem button className={classes.nested}>\r\n                    <ListItemIcon>\r\n                      <InboxIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Inbox\" />\r\n                  </ListItem>\r\n                  </Link>\r\n                  <Link color=\"inherit\" href=\"/sendmessage\">\r\n                  <ListItem button className={classes.nested}>\r\n                    <ListItemIcon>\r\n                      <InboxIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"New Message\" />\r\n                  </ListItem>\r\n                  </Link>\r\n                </List>\r\n              </Collapse>\r\n              <ListItem button onClick={this.handleLogout}>\r\n                <ListItemText primary=\"Logout\"/>\r\n              </ListItem>\r\n\r\n                </div>\r\n              )   }else{\r\n                return (\r\n                  <div>\r\n          \r\n                  <Link color=\"inherit\" href=\"/login\">\r\n                  <ListItem button>\r\n                  <ListItemIcon>\r\n                  </ListItemIcon>\r\n                  <ListItemText primary=\"login/signup\" />\r\n                </ListItem>\r\n                  </Link>\r\n          \r\n          {/* <Link color=\"inherit\" href=\"/register\">\r\n          <ListItem button>\r\n          <ListItemIcon>\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"login\" />\r\n          </ListItem>\r\n          </Link> */}\r\n                  </div>\r\n                  \r\n                )\r\n              }\r\n            }\r\n            handleLogout = () => {\r\n              this.props.clearToken()\r\n              localStorage.clear()\r\n              }\r\n              handleClick = () => {\r\n                this.setState({open: !this.state.open});\r\n              };\r\n    render(){\r\n\r\n        const {classes} = this.props;\r\n    return (\r\n      <List\r\n      component=\"nav\"\r\n      aria-labelledby=\"nested-list-subheader\"\r\n      subheader={\r\n        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n          Welcome to GameDomain!\r\n        </ListSubheader>\r\n      }\r\n      className={classes.root}\r\n      >\r\n        <Link color=\"inherit\" href=\"/leaderboard\">\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Check the LeaderBoards!\" />\r\n      </ListItem>\r\n        </Link>\r\n        <Link color=\"inherit\" href=\"/game\">\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Play A Game!!!\" />\r\n      </ListItem>\r\n        </Link>\r\n        {this.loginDisplay(classes)}\r\n    </List>\r\n  );\r\n}\r\n}\r\n\r\nexport default withStyles(styles)(SideNav)","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\SendMessage.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\index.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\sunsetTheme.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\mainTheme.tsx",["110","111","112","113"],"import { createMuiTheme, ThemeProvider } from '@material-ui/core';\r\nimport { orange, yellow} from '@material-ui/core/colors';\r\nimport { DensityTypes } from '@material-ui/data-grid';\r\n\r\n\r\n//ADDS CUSTOM PROPERTIES TOO CREATEMUITHEME\r\n\r\n// declare module '@material-ui/core/styles/createMuiTheme' {\r\n//     interface Theme {\r\n//       sideBar: {\r\n//         danger: React.CSSProperties['color'],\r\n//       }\r\n//     }\r\n//     interface ThemeOptions {\r\n//       sideBar: {\r\n//         danger: React.CSSProperties['color']\r\n//       }\r\n//     }\r\n//   }\r\n  \r\n//   declare module \"@material-ui/core/styles/createPalette\" {\r\n//     interface Palette {\r\n//       neutral: Palette['primary'];\r\n//     }\r\n//     interface PaletteOptions {\r\n//       neutral: PaletteOptions['primary'];\r\n//     }\r\n//   }\r\n\r\nconst mainTheme = createMuiTheme({\r\n    palette: {\r\n      type: 'light',\r\n      text: {\r\n        primary: \"#fff\"\r\n      },\r\n      background: {\r\n        default: \"#424242\"\r\n      },   \r\n      primary: {\r\n        main: '#152B38',\r\n      },\r\n      secondary: {\r\n        main: '#fff',\r\n      },\r\n      contrastThreshold: 3,\r\n      tonalOffset: 0.2,\r\n    },\r\n    overrides: {\r\n        MuiInputBase:{\r\n            root: {\r\n                backgroundColor: '#152B38',\r\n                borderColor: \"#fff\",\r\n                marginTop: 10,\r\n                marginBottom: 10,\r\n                \"&$focused\": {\r\n                      borderColor: '#fff',\r\n            },\r\n            '& fieldset': {\r\n                borderColor: '#fff',\r\n            },\r\n            '*::-webkit-scrollbar': {\r\n                width: '0.4em'\r\n              },\r\n              '*::-webkit-scrollbar-track': {\r\n                '-webkit-box-shadow': 'inset 0 0 6px rgba(0,0,0,0.00)'\r\n              },\r\n              '*::-webkit-scrollbar-thumb': {\r\n                backgroundColor: 'rgba(0,0,0,.1)',\r\n                outline: '1px solid slategrey'\r\n              }\r\n            },\r\n            // input: {\r\n                \r\n            // }\r\n        },\r\n        // MuiTextField: {\r\n        //     root: {\r\n        //         backgroundColor: '#152B38',\r\n        //     },\r\n        // }\r\n    },\r\n    \r\n    // props: {\r\n    //     MuiInput: {\r\n    //             color: \"primary\",\r\n    //             '& label.Mui-focused': {\r\n    //                 color: 'green',\r\n    // }\r\n    \r\n\r\n  });\r\n\r\n\r\n  export default mainTheme;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\darkTheme.tsx",["114","115"],"// import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\r\nimport { createMuiTheme } from '@material-ui/core';\r\nimport { orange, yellow} from '@material-ui/core/colors';\r\n\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',   \r\n    primary: {\r\n      main: '#152B38',\r\n    },\r\n    secondary: {\r\n      main: '#65C5C7',\r\n    },\r\n    contrastThreshold: 3,\r\n    tonalOffset: 0.2,\r\n  },\r\n});\r\n\r\nexport default darkTheme;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\ReplyMessage.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\UpdateMessage.tsx",[],{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"121","line":2,"column":61,"nodeType":"122","messageId":"123","endLine":2,"endColumn":73},{"ruleId":"120","severity":1,"message":"124","line":5,"column":22,"nodeType":"122","messageId":"123","endLine":5,"endColumn":32},{"ruleId":"120","severity":1,"message":"125","line":6,"column":17,"nodeType":"122","messageId":"123","endLine":6,"endColumn":30},{"ruleId":"120","severity":1,"message":"126","line":7,"column":16,"nodeType":"122","messageId":"123","endLine":7,"endColumn":22},{"ruleId":"127","severity":1,"message":"128","line":34,"column":7,"nodeType":"129","endLine":34,"endColumn":18,"suggestions":"130"},{"ruleId":"131","severity":1,"message":"132","line":176,"column":15,"nodeType":"122","messageId":"123","endLine":176,"endColumn":28},{"ruleId":"131","severity":1,"message":"132","line":195,"column":15,"nodeType":"122","messageId":"123","endLine":195,"endColumn":28},{"ruleId":"131","severity":1,"message":"132","line":214,"column":15,"nodeType":"122","messageId":"123","endLine":214,"endColumn":28},{"ruleId":"116","replacedBy":"117"},{"ruleId":"118","replacedBy":"119"},{"ruleId":"120","severity":1,"message":"133","line":3,"column":8,"nodeType":"122","messageId":"123","endLine":3,"endColumn":12},{"ruleId":"120","severity":1,"message":"134","line":4,"column":10,"nodeType":"122","messageId":"123","endLine":4,"endColumn":18},{"ruleId":"120","severity":1,"message":"135","line":4,"column":20,"nodeType":"122","messageId":"123","endLine":4,"endColumn":26},{"ruleId":"120","severity":1,"message":"133","line":4,"column":22,"nodeType":"122","messageId":"123","endLine":4,"endColumn":26},{"ruleId":"120","severity":1,"message":"133","line":3,"column":8,"nodeType":"122","messageId":"123","endLine":3,"endColumn":12},{"ruleId":"120","severity":1,"message":"136","line":17,"column":10,"nodeType":"122","messageId":"123","endLine":17,"endColumn":18},{"ruleId":"120","severity":1,"message":"137","line":17,"column":20,"nodeType":"122","messageId":"123","endLine":17,"endColumn":24},{"ruleId":"138","severity":1,"message":"139","line":110,"column":43,"nodeType":"140","messageId":"141","endLine":110,"endColumn":45},{"ruleId":"138","severity":1,"message":"139","line":118,"column":31,"nodeType":"140","messageId":"141","endLine":118,"endColumn":33},{"ruleId":"138","severity":1,"message":"139","line":193,"column":84,"nodeType":"140","messageId":"141","endLine":193,"endColumn":86},{"ruleId":"138","severity":1,"message":"139","line":238,"column":54,"nodeType":"140","messageId":"141","endLine":238,"endColumn":56},{"ruleId":"120","severity":1,"message":"142","line":13,"column":8,"nodeType":"122","messageId":"123","endLine":13,"endColumn":16},{"ruleId":"120","severity":1,"message":"143","line":16,"column":8,"nodeType":"122","messageId":"123","endLine":16,"endColumn":18},{"ruleId":"138","severity":1,"message":"139","line":73,"column":76,"nodeType":"140","messageId":"141","endLine":73,"endColumn":78},{"ruleId":"120","severity":1,"message":"125","line":1,"column":26,"nodeType":"122","messageId":"123","endLine":1,"endColumn":39},{"ruleId":"120","severity":1,"message":"144","line":2,"column":10,"nodeType":"122","messageId":"123","endLine":2,"endColumn":16},{"ruleId":"120","severity":1,"message":"145","line":2,"column":18,"nodeType":"122","messageId":"123","endLine":2,"endColumn":24},{"ruleId":"120","severity":1,"message":"146","line":3,"column":10,"nodeType":"122","messageId":"123","endLine":3,"endColumn":22},{"ruleId":"120","severity":1,"message":"144","line":3,"column":10,"nodeType":"122","messageId":"123","endLine":3,"endColumn":16},{"ruleId":"120","severity":1,"message":"145","line":3,"column":18,"nodeType":"122","messageId":"123","endLine":3,"endColumn":24},"no-native-reassign",["147"],"no-negated-in-lhs",["148"],"@typescript-eslint/no-unused-vars","'ReplyMessage' is defined but never used.","Identifier","unusedVar","'makeStyles' is defined but never used.","'ThemeProvider' is defined but never used.","'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'buildGame'. Either include it or remove the dependency array.","ArrayExpression",["149"],"no-unused-vars","'canvasContext' is assigned a value but never used.","'Grid' is defined but never used.","'DataGrid' is defined but never used.","'ColDef' is defined but never used.","'Redirect' is defined but never used.","'Link' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'SendIcon' is defined but never used.","'StarBorder' is defined but never used.","'orange' is defined but never used.","'yellow' is defined but never used.","'DensityTypes' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"150","fix":"151"},"Update the dependencies array to be: [buildGame, isPlaying]",{"range":"152","text":"153"},[1172,1183],"[buildGame, isPlaying]"]