[{"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\index.tsx":"1","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\reportWebVitals.ts":"2","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\App.tsx":"3","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\index.tsx":"4","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Auth\\Auth.tsx":"5","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\myGame.jsx":"6","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\GameClasses.jsx":"7","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\Canvas.jsx":"8","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoards.tsx":"9","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoardDisplay.tsx":"10"},{"size":500,"mtime":499162500000,"results":"11","hashOfConfig":"12"},{"size":425,"mtime":499162500000,"results":"13","hashOfConfig":"12"},{"size":650,"mtime":1608670054493,"results":"14","hashOfConfig":"12"},{"size":111,"mtime":1608657813543,"results":"15","hashOfConfig":"12"},{"size":4573,"mtime":1608668071219,"results":"16","hashOfConfig":"12"},{"size":10312,"mtime":1608655149112,"results":"17","hashOfConfig":"12"},{"size":3484,"mtime":1608615019274,"results":"18","hashOfConfig":"12"},{"size":502,"mtime":1608607140136,"results":"19","hashOfConfig":"12"},{"size":693,"mtime":1608670088772,"results":"20","hashOfConfig":"12"},{"size":550,"mtime":1608665234473,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"1g8q9lt",{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35","usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\index.tsx",[],["45","46"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\reportWebVitals.ts",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\App.tsx",["47"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\index.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Auth\\Auth.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\myGame.jsx",["48","49","50","51"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport gsap from \"gsap\";\r\nimport \"./gameStyle.css\"\r\n// const GameConst = require(\"./GameClasses\");\r\n// const Enemy = require(\"./GameClasses\").Enemy;\r\n// const Particle = require(\"./GameClasses\").Particle;\r\n// const Projectile = require(\"./GameClasses\").Projectile;\r\n// const Player = require(\"./GameClasses\").Player;\r\n\r\nconst Canvas = props => {\r\n    // constructor create.Ref(canvas)\r\n    let [score, setScore] = useState(0)\r\n    const [isPlaying, setIsPlaying] = useState(false)\r\n    const [projectiles, setProjectiles] = useState([])\r\n    const [enemies, setEnemies] = useState([])\r\n    const [particles, setParticles] = useState([])\r\n    const canvasRef = useRef(null)\r\n    const friction = 0.99;\r\n    let player;\r\n\r\n    class Player {\r\n        constructor(x, y, radius, color) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n        }\r\n\r\n        draw() {\r\n\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n    }\r\n\r\n    class Projectile {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n        update() {\r\n            this.draw()\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n        }\r\n    }\r\n\r\n\r\n    class Enemy {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n\r\n        update() {\r\n            this.draw()\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n        }\r\n\r\n    }\r\n\r\n    class Particle {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n            this.alpha = 1\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.save()\r\n            canvasContext.globalAlpha = this.alpha\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n            canvasContext.restore()\r\n        }\r\n\r\n        update() {\r\n            this.draw()\r\n            this.velocity.x *= friction\r\n            this.velocity.y *= friction\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n            this.alpha -= 0.01\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function getcontext() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        canvas.width = window.innerWidth;\r\n        canvas.height = window.innerHeight;\r\n        const x = canvas.width / 2\r\n        const y = canvas.height / 2\r\n        player = new Player(x, y, 10, \"red\",)\r\n        spawnEnemies(canvas, canvasContext)\r\n        animate(canvas, canvasContext)\r\n    }\r\n\r\n\r\n    function spawnEnemies() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n\r\n        let newEnemies = enemies;\r\n        // const canvas = canvasRef.current;\r\n        // const canvasContext = canvasRef.current.getContext(\"2d\")\r\n        setInterval(() => {\r\n            const radius = Math.random() * (50 - 10) + 10\r\n\r\n            let x;\r\n            let y;\r\n\r\n            if (Math.random() < 0.5) {\r\n\r\n                x = Math.random() < 0.5 ? 0 - radius : canvas.width + radius\r\n                y = Math.random() * canvas.height\r\n            } else {\r\n                x = Math.random() * canvas.width\r\n                y = Math.random() < 0.5 ? 0 - radius : canvas.height + radius\r\n            }\r\n            const color = `hsl(${Math.random() * 360} , 50%, 50%)`\r\n\r\n            const angle = Math.atan2(\r\n                canvas.height / 2 - y,\r\n                canvas.width / 2 - x)\r\n            const velocity = {\r\n                x: Math.cos(angle),\r\n                y: Math.sin(angle)\r\n            }\r\n            newEnemies.push(new Enemy(x, y, radius, color, velocity))\r\n            setEnemies(newEnemies)\r\n        }, 1000)\r\n    }\r\n\r\n\r\n    function animate() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        let animeationId;\r\n        let newParticles = particles\r\n        let newProjectiles = projectiles\r\n        let newEnemies = enemies\r\n\r\n\r\n        animeationId = requestAnimationFrame(animate)\r\n        canvasContext.fillStyle = \"rgba(0,0,0,0.2)\"\r\n        canvasContext.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n        player.draw();\r\n        //create explosions\r\n        newParticles.forEach((particle, index) => {\r\n            if (particle.alpha <= 0) {\r\n                particles.splice(index, 1)\r\n                setParticles(newParticles)\r\n\r\n            } else {\r\n                particle.update()\r\n            }\r\n        });\r\n        //create projectiles\r\n        newProjectiles.forEach((projectile, index) => {\r\n            projectile.update()\r\n\r\n            if (projectile.x + projectile.radius < 0 ||\r\n                projectile.x - projectile.radius > canvas.width ||\r\n                projectile.y + projectile.radius < 0 ||\r\n                projectile.y - projectile.radius > canvas.height) {\r\n                setTimeout(() => {\r\n                    newProjectiles.splice(index, 1)\r\n                    setProjectiles(newProjectiles)\r\n                }, 0)\r\n            }\r\n\r\n        })\r\n\r\n        newEnemies.forEach((enemy, index) => {\r\n            enemy.update()\r\n\r\n            //gets the distance from an enemy to the player\r\n            const dist = Math.hypot(player.x - enemy.x, player.y - enemy.y)\r\n\r\n            if (dist - enemy.radius - player.radius < 1) {\r\n                cancelAnimationFrame(animeationId)\r\n            }\r\n\r\n            newProjectiles.forEach((projectile, pIndex) => {\r\n                const dist = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y)\r\n                //Peojectiles hit enemy\r\n                if (dist - enemy.radius - projectile.radius < 5) {\r\n\r\n\r\n                    //create explosions\r\n                    for (let i = 0; i < enemy.radius * 2; i++) {\r\n                        newParticles.push(new Particle(\r\n                            projectile.x, // spawn location projectiles x\r\n                            projectile.y, // spawn location projectiles y\r\n                            Math.random() * 2, //radius(size) of particle\r\n                            enemy.color, { //makes explosion same color as enemy\r\n                            x: (Math.random() - 0.5) * (Math.random() * 8),//x volocity\r\n                            y: (Math.random() - 0.5) * (Math.random() * 8) //y volocity\r\n                        }))\r\n                    }\r\n                    setParticles(newParticles)\r\n\r\n                    if (enemy.radius - 10 > 5) {\r\n                        //the score\r\n                        setScore(score += 100)\r\n                        gsap.to(enemy, { radius: enemy.radius - 10 })\r\n                        setTimeout(() => {\r\n                            newProjectiles.splice(pIndex, 1)\r\n                            setProjectiles(newProjectiles)\r\n                        }, 0)\r\n                    }\r\n                    else {\r\n                        setScore(score += 250)\r\n                        setTimeout(() => {\r\n                            newEnemies.splice(index, 1)\r\n                            newProjectiles.splice(pIndex, 1)\r\n                            setEnemies(newEnemies)\r\n                            setProjectiles(newProjectiles)\r\n                        }, 0)\r\n                    }\r\n                }\r\n\r\n            })\r\n        })\r\n    }\r\n\r\n    function handleClick(event) {\r\n        const canvas = canvasRef.current\r\n        let newProjectiles = projectiles\r\n        const angle = Math.atan2(\r\n            event.clientY - canvas.height / 2,\r\n            event.clientX - canvas.width / 2)\r\n        const velocity = {\r\n            x: Math.cos(angle) * 5,\r\n            y: Math.sin(angle) * 5\r\n        }\r\n        newProjectiles.push(\r\n            new Projectile(\r\n                canvas.width / 2,\r\n                canvas.height / 2,\r\n                5,\r\n                \"white\",\r\n                velocity\r\n            )\r\n        )\r\n        setProjectiles(newProjectiles)\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n\r\n                <div className=\"score\"><span>Score:  </span><span>{score}</span></div>\r\n            <canvas ref={canvasRef}{...props} onClick={(e) => handleClick(e)}></canvas>\r\n            <button onClick={() => getcontext()} className=\"thebutton\">The Button</button>\r\n\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Canvas;\r\n",["52","53"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\GameClasses.jsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\Canvas.jsx",["54","55"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoards.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoardDisplay.tsx",[],{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"60","severity":1,"message":"61","line":1,"column":16,"nodeType":"62","messageId":"63","endLine":1,"endColumn":24},{"ruleId":"64","severity":1,"message":"65","line":1,"column":25,"nodeType":"62","messageId":"63","endLine":1,"endColumn":34},{"ruleId":"64","severity":1,"message":"66","line":13,"column":12,"nodeType":"62","messageId":"63","endLine":13,"endColumn":21},{"ruleId":"64","severity":1,"message":"67","line":13,"column":23,"nodeType":"62","messageId":"63","endLine":13,"endColumn":35},{"ruleId":"64","severity":1,"message":"68","line":161,"column":15,"nodeType":"62","messageId":"63","endLine":161,"endColumn":28},{"ruleId":"56","replacedBy":"57"},{"ruleId":"58","replacedBy":"59"},{"ruleId":"69","severity":1,"message":"70","line":9,"column":9,"nodeType":"71","endLine":10,"endColumn":4},{"ruleId":"72","severity":1,"message":"73","line":32,"column":1,"nodeType":"74","endLine":32,"endColumn":39},"no-native-reassign",["75"],"no-negated-in-lhs",["76"],"@typescript-eslint/no-unused-vars","'useState' is defined but never used.","Identifier","unusedVar","no-unused-vars","'useEffect' is defined but never used.","'isPlaying' is assigned a value but never used.","'setIsPlaying' is assigned a value but never used.","'canvasContext' is assigned a value but never used.","react-hooks/exhaustive-deps","The 'draw' function makes the dependencies of useEffect Hook (at line 27) change on every render. Move it inside the useEffect callback. Alternatively, wrap the definition of 'draw' in its own useCallback() Hook.","VariableDeclarator","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-global-assign","no-unsafe-negation"]