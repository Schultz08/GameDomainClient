[{"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\index.tsx":"1","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\reportWebVitals.ts":"2","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\App.tsx":"3","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\index.tsx":"4","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Auth\\Auth.tsx":"5","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\myGame.jsx":"6","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoards.tsx":"7","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoardDisplay.tsx":"8","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\Message.tsx":"9","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\MessageDisplay.tsx":"10","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Nav\\SideNav.tsx":"11"},{"size":500,"mtime":499162500000,"results":"12","hashOfConfig":"13"},{"size":425,"mtime":499162500000,"results":"14","hashOfConfig":"13"},{"size":3514,"mtime":1609961838985,"results":"15","hashOfConfig":"13"},{"size":275,"mtime":1609350886753,"results":"16","hashOfConfig":"13"},{"size":5350,"mtime":1609961717184,"results":"17","hashOfConfig":"13"},{"size":11712,"mtime":1609374264308,"results":"18","hashOfConfig":"13"},{"size":684,"mtime":1609172966155,"results":"19","hashOfConfig":"13"},{"size":1365,"mtime":1609172966155,"results":"20","hashOfConfig":"13"},{"size":1325,"mtime":1609778014103,"results":"21","hashOfConfig":"13"},{"size":2388,"mtime":1609773711867,"results":"22","hashOfConfig":"13"},{"size":5722,"mtime":1609961964173,"results":"23","hashOfConfig":"13"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},"1g8q9lt",{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"29","messages":"30","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"37","usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"26"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"26"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"26"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\index.tsx",[],["51","52"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\reportWebVitals.ts",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\App.tsx",["53","54"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\index.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Auth\\Auth.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\myGame.jsx",["55","56","57","58"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport gsap from \"gsap\";\r\nimport \"./gameStyle.css\"\r\n\r\nconst Canvas = props => {\r\n    let [score, setScore] = useState(0)\r\n    let [isPlaying, setIsPlaying] = useState(false)\r\n    const [projectiles, setProjectiles] = useState([])\r\n    const [enemies, setEnemies] = useState([])\r\n    const [particles, setParticles] = useState([])\r\n    const getWidth = () => window.innerWidth\r\n    const getHeight = () => window.innerHeight\r\n    let [width, setWidth] = useState(getWidth())\r\n    let [height, setHeight] = useState(getHeight())\r\n    let prevent = 1;\r\n\r\n    const canvasRef = useRef(null)\r\n    const friction = 0.99;\r\n    let player;\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        canvas.style.width ='100%';\r\n        canvas.style.height='100%';\r\n        canvas.width  = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n        canvasContext.fillStyle = \"rgba(0,0,0,1)\"\r\n        canvasContext.fillRect(0, 0, canvas.width, canvas.height)\r\n    },[prevent])\r\n\r\n    useEffect(() => {\r\n        buildGame();\r\n    },[isPlaying])\r\n\r\n\r\n    useEffect(() => {\r\n        const resizeListener = () => {\r\n            setWidth(getWidth())\r\n            setHeight(getHeight())\r\n        };\r\n        window.addEventListener(\"resize\", resizeListener)\r\n\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resizeListener)\r\n        }\r\n    },[width, height])\r\n\r\n    class Player {\r\n        constructor(x, y, radius, color) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n        }\r\n\r\n        draw() {\r\n\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n    }\r\n\r\n    class Projectile {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n        update() {\r\n            this.draw()\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n        }\r\n    }\r\n\r\n\r\n    class Enemy {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n\r\n        update() {\r\n            this.draw()\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n        }\r\n\r\n    }\r\n\r\n    class Particle {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n            this.alpha = 1\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.save()\r\n            canvasContext.globalAlpha = this.alpha\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n            canvasContext.restore()\r\n        }\r\n\r\n        update() {\r\n            this.draw()\r\n            this.velocity.x *= friction\r\n            this.velocity.y *= friction\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n            this.alpha -= 0.01\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function setGameWindow(){\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        canvas.style.width ='100%';\r\n        canvas.style.height='100%';\r\n        canvas.width  = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n    }\r\n\r\n    function startGame() {\r\n        setIsPlaying(prevState => !prevState)\r\n        \r\n    }\r\n    \r\n    function buildGame() {\r\n        setGameWindow();\r\n        console.log(\"1\",isPlaying)\r\n\r\n        const canvas = canvasRef.current;\r\n        console.log(\"2\",isPlaying)\r\n\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        console.log(\"3\",isPlaying)\r\n\r\n        const x = canvas.width / 2\r\n        console.log(\"4\",isPlaying)\r\n\r\n        const y = canvas.height / 2\r\n        console.log(\"5\",isPlaying)\r\n\r\n        player = new Player(x, y, 10, \"red\",)\r\n        console.log(\"6\",isPlaying)\r\n\r\n        spawnEnemies()\r\n        animate()\r\n    }\r\n\r\n\r\n    function spawnEnemies() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n\r\n        let newEnemies = enemies;\r\n        // const canvas = canvasRef.current;\r\n        // const canvasContext = canvasRef.current.getContext(\"2d\")\r\n        setInterval(() => {\r\n            const radius = Math.random() * (50 - 10) + 10\r\n\r\n            let x;\r\n            let y;\r\n\r\n            if (Math.random() < 0.5) {\r\n\r\n                x = Math.random() < 0.5 ? 0 - radius : canvas.width + radius\r\n                y = Math.random() * canvas.height\r\n            } else {\r\n                x = Math.random() * canvas.width\r\n                y = Math.random() < 0.5 ? 0 - radius : canvas.height + radius\r\n            }\r\n            const color = `hsl(${Math.random() * 360} , 50%, 50%)`\r\n\r\n            const angle = Math.atan2(\r\n                canvas.height / 2 - y,\r\n                canvas.width / 2 - x)\r\n            const velocity = {\r\n                x: Math.cos(angle),\r\n                y: Math.sin(angle)\r\n            }\r\n            newEnemies.push(new Enemy(x, y, radius, color, velocity))\r\n            setEnemies(newEnemies)\r\n        }, 1000)\r\n    }\r\n\r\n\r\n    function animate() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        let animeationId;\r\n        let newParticles = particles\r\n        let newProjectiles = projectiles\r\n        let newEnemies = enemies\r\n\r\n\r\n        animeationId = requestAnimationFrame(animate)\r\n        canvasContext.fillStyle = \"rgba(0,0,0,0.2)\"\r\n        canvasContext.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n        player.draw();\r\n\r\n        if(!isPlaying){\r\n            cancelAnimationFrame(animeationId)\r\n        }\r\n        //create explosions\r\n        newParticles.forEach((particle, index) => {\r\n            if (particle.alpha <= 0) {\r\n                particles.splice(index, 1)\r\n                setParticles(newParticles)\r\n\r\n            } else {\r\n                particle.update()\r\n            }\r\n        });\r\n        //create projectiles\r\n        newProjectiles.forEach((projectile, index) => {\r\n            projectile.update()\r\n\r\n            if (projectile.x + projectile.radius < 0 ||\r\n                projectile.x - projectile.radius > canvas.width ||\r\n                projectile.y + projectile.radius < 0 ||\r\n                projectile.y - projectile.radius > canvas.height) {\r\n                setTimeout(() => {\r\n                    newProjectiles.splice(index, 1)\r\n                    setProjectiles(newProjectiles)\r\n                }, 0)\r\n            }\r\n\r\n        })\r\n\r\n        newEnemies.forEach((enemy, index) => {\r\n            enemy.update()\r\n\r\n            //gets the distance from an enemy to the player\r\n            const dist = Math.hypot(player.x - enemy.x, player.y - enemy.y)\r\n\r\n            if (dist - enemy.radius - player.radius < 1) {\r\n                cancelAnimationFrame(animeationId)\r\n            }\r\n\r\n            newProjectiles.forEach((projectile, pIndex) => {\r\n                const dist = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y)\r\n                //Peojectiles hit enemy\r\n                if (dist - enemy.radius - projectile.radius < 5) {\r\n\r\n\r\n                    //create explosions\r\n                    for (let i = 0; i < enemy.radius * 2; i++) {\r\n                        newParticles.push(new Particle(\r\n                            projectile.x, // spawn location projectiles x\r\n                            projectile.y, // spawn location projectiles y\r\n                            Math.random() * 2, //radius(size) of particle\r\n                            enemy.color, { //makes explosion same color as enemy\r\n                            x: (Math.random() - 0.5) * (Math.random() * 8),//x volocity\r\n                            y: (Math.random() - 0.5) * (Math.random() * 8) //y volocity\r\n                        }))\r\n                    }\r\n                    setParticles(newParticles)\r\n\r\n                    if (enemy.radius - 10 > 5) {\r\n                        //the score\r\n                        setScore(score += 100)\r\n                        gsap.to(enemy, { radius: enemy.radius - 10 })\r\n                        setTimeout(() => {\r\n                            newProjectiles.splice(pIndex, 1)\r\n                            setProjectiles(newProjectiles)\r\n                        }, 0)\r\n                    }\r\n                    else {\r\n                        setScore(score += 250)\r\n                        setTimeout(() => {\r\n                            newEnemies.splice(index, 1)\r\n                            newProjectiles.splice(pIndex, 1)\r\n                            setEnemies(newEnemies)\r\n                            setProjectiles(newProjectiles)\r\n                        }, 0)\r\n                    }\r\n                }\r\n\r\n            })\r\n        })\r\n    }\r\n\r\n    function handleClick(event) {\r\n        const canvas = canvasRef.current\r\n        let newProjectiles = projectiles\r\n        const angle = Math.atan2(\r\n            event.clientY - height / 2,\r\n            event.clientX -  width / 2)\r\n        const velocity = {\r\n            x: Math.cos(angle) * 5,\r\n            y: Math.sin(angle) * 5\r\n        }\r\n        newProjectiles.push(\r\n            new Projectile(\r\n                canvas.width / 2,\r\n                canvas.height / 2,\r\n                5,\r\n                \"white\",\r\n                velocity\r\n            )\r\n        )\r\n        setProjectiles(newProjectiles)\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"score\">\r\n                <span>Score:  </span>\r\n                <span>{score}</span>\r\n            </div>\r\n            <canvas ref={canvasRef}{...props} onClick={(e) => handleClick(e)}></canvas>\r\n            <button onClick={() => startGame()} className=\"thebutton\">The Button</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Canvas;\r\n",["59","60"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoards.tsx",["61"],"import React from \"react\";\r\nimport LeaderBoardsDisplay from \"./LeaderBoardDisplay\"\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass LeaderBoards extends React.Component {\r\n    state ={\r\n        players: []\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(`http://localhost:3000/score/allScores/`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.setState({players: data}))\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <LeaderBoardsDisplay players={this.state.players}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LeaderBoards;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoardDisplay.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\Message.tsx",["62"],"import React from \"react\";\r\nimport MessageDisplay from \"./MessageDisplay\"\r\n\r\ntype myProps = {\r\n    token: string | null\r\n}\r\n\r\ntype myState = {\r\n    conversation: []\r\n}\r\n\r\n\r\nclass Message extends React.Component<myProps, myState> {\r\n    constructor(props: myProps) {\r\n        super(props)\r\n        this.state = {\r\n            conversation: []\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log(this.props.token, \"my token\")\r\n        fetch(`http://localhost:3000/message/getMail`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": `${this.props.token}`\r\n            }\r\n        })\r\n            .then(res => res.json())\r\n            .then(data => this.setState({ conversation: data }))\r\n            .catch(err => console.log(err))\r\n\r\n    }\r\n\r\n    displayConductor = () => {\r\n        if (!this.state.conversation == undefined) {\r\n            return (\r\n                <MessageDisplay conversation={this.state.conversation} />\r\n            )\r\n        } else {\r\n            return (\r\n                <div>\r\n                    <h1>My Mail</h1>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n                this.displayConductor()\r\n        )\r\n    }\r\n}\r\n\r\nexport default Message","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\MessageDisplay.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Nav\\SideNav.tsx",["63","64","65"],{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"71","line":5,"column":22,"nodeType":"72","messageId":"73","endLine":5,"endColumn":32},{"ruleId":"70","severity":1,"message":"74","line":5,"column":34,"nodeType":"72","messageId":"73","endLine":5,"endColumn":44},{"ruleId":"75","severity":1,"message":"76","line":34,"column":7,"nodeType":"77","endLine":34,"endColumn":18,"suggestions":"78"},{"ruleId":"79","severity":1,"message":"80","line":176,"column":15,"nodeType":"72","messageId":"73","endLine":176,"endColumn":28},{"ruleId":"79","severity":1,"message":"80","line":195,"column":15,"nodeType":"72","messageId":"73","endLine":195,"endColumn":28},{"ruleId":"79","severity":1,"message":"80","line":214,"column":15,"nodeType":"72","messageId":"73","endLine":214,"endColumn":28},{"ruleId":"66","replacedBy":"67"},{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","severity":1,"message":"81","line":3,"column":8,"nodeType":"72","messageId":"73","endLine":3,"endColumn":12},{"ruleId":"82","severity":1,"message":"83","line":37,"column":38,"nodeType":"84","messageId":"85","endLine":37,"endColumn":40},{"ruleId":"70","severity":1,"message":"86","line":13,"column":8,"nodeType":"72","messageId":"73","endLine":13,"endColumn":16},{"ruleId":"70","severity":1,"message":"87","line":16,"column":8,"nodeType":"72","messageId":"73","endLine":16,"endColumn":18},{"ruleId":"82","severity":1,"message":"83","line":67,"column":60,"nodeType":"84","messageId":"85","endLine":67,"endColumn":62},"no-native-reassign",["88"],"no-negated-in-lhs",["89"],"@typescript-eslint/no-unused-vars","'WithStyles' is defined but never used.","Identifier","unusedVar","'makeStyles' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'buildGame'. Either include it or remove the dependency array.","ArrayExpression",["90"],"no-unused-vars","'canvasContext' is assigned a value but never used.","'Grid' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'SendIcon' is defined but never used.","'StarBorder' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"91","fix":"92"},"Update the dependencies array to be: [buildGame, isPlaying]",{"range":"93","text":"94"},[1172,1183],"[buildGame, isPlaying]"]