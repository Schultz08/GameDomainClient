[{"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\index.tsx":"1","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\reportWebVitals.ts":"2","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\App.tsx":"3","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\index.tsx":"4","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Auth\\Auth.tsx":"5","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoards.tsx":"6","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoardDisplay.tsx":"7","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\Message.tsx":"8","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\MessageDisplay.tsx":"9","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Nav\\SideNav.tsx":"10","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\SendMessage.tsx":"11","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\index.tsx":"12","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\sunsetTheme.tsx":"13","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\mainTheme.tsx":"14","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\darkTheme.tsx":"15","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\ReplyMessage.tsx":"16","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\UpdateMessage.tsx":"17","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\GameLibrary\\GameLibrary.tsx":"18","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\GameLibrary\\createLibrary.tsx":"19","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\GameLibrary\\GameDisplay.tsx":"20","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\CircleBlaster.jsx":"21","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Admin\\AdminMenu.tsx":"22","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\helpers\\enviroment.js":"23"},{"size":500,"mtime":499162500000,"results":"24","hashOfConfig":"25"},{"size":425,"mtime":499162500000,"results":"26","hashOfConfig":"25"},{"size":7080,"mtime":1610535695899,"results":"27","hashOfConfig":"25"},{"size":540,"mtime":1610528977613,"results":"28","hashOfConfig":"25"},{"size":7191,"mtime":1610536148339,"results":"29","hashOfConfig":"25"},{"size":843,"mtime":1610536147415,"results":"30","hashOfConfig":"25"},{"size":1334,"mtime":1610528977608,"results":"31","hashOfConfig":"25"},{"size":4090,"mtime":1610536134923,"results":"32","hashOfConfig":"25"},{"size":15136,"mtime":1610528977610,"results":"33","hashOfConfig":"25"},{"size":6502,"mtime":1610536131168,"results":"34","hashOfConfig":"25"},{"size":5940,"mtime":1610536137598,"results":"35","hashOfConfig":"25"},{"size":155,"mtime":1610528977623,"results":"36","hashOfConfig":"25"},{"size":1238,"mtime":1610528977625,"results":"37","hashOfConfig":"25"},{"size":1853,"mtime":1610528977624,"results":"38","hashOfConfig":"25"},{"size":448,"mtime":1610528977623,"results":"39","hashOfConfig":"25"},{"size":3801,"mtime":1610536133560,"results":"40","hashOfConfig":"25"},{"size":3806,"mtime":1610536138437,"results":"41","hashOfConfig":"25"},{"size":2685,"mtime":1610528977607,"results":"42","hashOfConfig":"25"},{"size":1010,"mtime":1610528977607,"results":"43","hashOfConfig":"25"},{"size":4389,"mtime":1610535990027,"results":"44","hashOfConfig":"25"},{"size":13418,"mtime":1610528977614,"results":"45","hashOfConfig":"25"},{"size":13566,"mtime":1610536149127,"results":"46","hashOfConfig":"25"},{"size":345,"mtime":1610536136691,"results":"47","hashOfConfig":"25"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},"1djh20e",{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"61","messages":"62","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"66","messages":"67","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"50"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"50"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"50"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"80","usedDeprecatedRules":"50"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83","usedDeprecatedRules":"50"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"88","messages":"89","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"50"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"50"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"96","messages":"97","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"98","usedDeprecatedRules":"99"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\index.tsx",[],["104","105"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\reportWebVitals.ts",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\App.tsx",["106","107","108","109"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\index.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Auth\\Auth.tsx",["110"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoards.tsx",["111"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoardDisplay.tsx",["112","113","114"],"import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { DataGrid, ColDef } from '@material-ui/data-grid';\r\n\r\nconst useStyle = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: \"center\",\r\n        }\r\n\r\n    })\r\n)\r\n\r\n\r\nconst LeaderBoardsDisplay = (props: any) => {\r\n    const classes = useStyle();\r\n    return (\r\n        <div className={classes.root}>\r\n            \r\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                {\r\n                    props.players.map((player: any, index: number) => {\r\n                        return (\r\n                            <Grid item xs key={index}>\r\n                              \r\n                                    {player.gameName}<br/>\r\n                                    {player.user.userName}<br/>\r\n                                    {player.score}\r\n                               \r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LeaderBoardsDisplay;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\Message.tsx",["115"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\MessageDisplay.tsx",["116","117","118","119","120","121","122"],"import React from \"react\"\r\nimport { withStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Box from '@material-ui/core/Box';\r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport IconButton from '@material-ui/core/IconButton';\r\nimport KeyboardArrowDownIcon from '@material-ui/icons/KeyboardArrowDown';\r\nimport KeyboardArrowUpIcon from '@material-ui/icons/KeyboardArrowUp';\r\nimport { Button, TextField } from \"@material-ui/core\"\r\nimport { Redirect, Link } from \"react-router-dom\";\r\nimport ReplyMessage from \"./ReplyMessage\"\r\nimport UpdateMessage from \"./UpdateMessage\"\r\n\r\n//Message\r\ntype myProps = {\r\n    conversation?: any;\r\n    classes: any;\r\n    token: string;\r\n    deleteMessage(id: number, isReplyMessage: boolean): void;\r\n    loggedInUserId: number | null;\r\n}\r\n\r\ntype myState = {\r\n    messages: any;\r\n    page: number;\r\n    rowsPerPage: number;\r\n    isOpen: boolean;\r\n    showReply: boolean;\r\n    isReply: boolean;\r\n    isUpdate: boolean;\r\n    parentMessage: any;\r\n    messageToUpdate: any | null;\r\n}\r\n\r\n//Row Fragment props/state\r\n\r\ntype rowState = {\r\n    isOpen: boolean;\r\n    message: any;\r\n    showReply: boolean;\r\n    activeReply: number | null;\r\n    reload: boolean | null;\r\n}\r\n\r\ntype rowProps = {\r\n    message: any;\r\n    replyToMessage(message: any): void;\r\n    deleteMessage(id: number, isReplyMessage: boolean): void;\r\n    updateMessage(message: any): void;\r\n    classes: any;\r\n    loggedInUserId: number | null;\r\n}\r\n//\r\n\r\nconst styles = ((theme: Theme) => createStyles({\r\n    root: {\r\n        flexGrow: 1,\r\n    },\r\n    message: {\r\n        padding: theme.spacing(2),\r\n        textAlign: \"center\",\r\n        color: \"red\",\r\n    },\r\n    replyMessageTable: {\r\n        width: \"50%\",\r\n        margin: 2,\r\n        marginInlineStart: \"auto\",\r\n    },\r\n    replyMessageHeader: {\r\n        width: \"49%\",\r\n        margin: 2,\r\n        marginTop: 5,\r\n\r\n    },\r\n    replyMessageBody: {\r\n        margin: 2,\r\n        marginTop: 10,\r\n\r\n    },\r\n}))\r\n\r\n//This creates the Rows for the table as fragments\r\nclass Row extends React.Component<rowProps, rowState>{\r\n    constructor(props: rowProps) {\r\n        super(props)\r\n        this.state = {\r\n            isOpen: false,\r\n            message: this.props.message,\r\n            showReply: false,\r\n            activeReply: null,\r\n            reload: null,\r\n        }\r\n    }\r\n\r\n    // handles the display of the reply messageBody. so only the selected reply message is displayed.\r\n    handleShowReply = (id: number) => {\r\n        if (this.state.activeReply == null) {\r\n            this.setState({ activeReply: id })\r\n            this.setState({ showReply: !this.state.showReply })\r\n        } else if (this.state.activeReply !== id) {\r\n            this.setState({ activeReply: id })\r\n        } else if (this.state.activeReply == id) {\r\n            this.setState({ showReply: !this.state.showReply })\r\n            this.setState({ activeReply: null })\r\n        }\r\n    }\r\n\r\n    // could of been fine is i left it as onclick={this.setState({isOpen: !this.state.isOpen})} however, I wanted the reply messages to close when the user closes that message conversation.\r\n    handleOpen = () => {\r\n        if (this.state.isOpen == false) {\r\n            this.setState({ isOpen: true })\r\n        } else {\r\n            this.setState({ isOpen: false })\r\n            this.setState({ showReply: false })\r\n            this.setState({ activeReply: null })\r\n        }\r\n    }\r\n\r\n    handleDelete = (id: number) => {\r\n        this.props.deleteMessage(id, true)\r\n        this.setState({ reload: !this.state.reload })\r\n    }\r\n    //Because i wanted the replyMessageBody to display above the table not below i made it into a function that shows/hides when user clicks on a reply message. This function will replace the current messageBody being displayed\r\n    replyBodyDisplay = (theMessage: any) => {\r\n        console.log(this.state.activeReply)\r\n        if (this.state.showReply) {\r\n            let modelDate = theMessage.replies[this.state.activeReply!].createdAt, newDate = (new Date(modelDate)).toLocaleString();\r\n            return (\r\n                <div>\r\n                    <TextField className={this.props.classes.replyMessageHeader} id=\"from\"\r\n                        label=\"From\"\r\n                        value={theMessage.user.userName}\r\n                        fullWidth\r\n                        InputProps={{\r\n                            readOnly: true\r\n                        }}\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <TextField className={this.props.classes.replyMessageHeader} id=\"sent\"\r\n                        label=\"sent\"\r\n                        value={newDate}\r\n                        fullWidth\r\n                        InputProps={{\r\n                            readOnly: true\r\n                        }}\r\n                        variant=\"outlined\"\r\n                    />\r\n                    <TextField className={this.props.classes.replyMessageBody}\r\n                        id=\"messageBody\"\r\n                        label=\"Message\"\r\n                        value={theMessage.replies[this.state.activeReply!].messageBody}\r\n                        variant=\"outlined\"\r\n                        InputProps={{\r\n                            readOnly: true\r\n                        }}\r\n                        multiline\r\n                        rows={10}\r\n                        rowsMax={10}\r\n                        fullWidth\r\n                    />\r\n                </div>\r\n            )\r\n\r\n        } else {\r\n            return null\r\n        }\r\n    }\r\n\r\n\r\n    //to prevent a .map on undifined error this function was made to display the replies table only if the message has replies.\r\n    replyConductor = (messages: any) => {\r\n        console.log(messages, \"replyConductor\")\r\n        if (this.state.message.replies.length > 0) {\r\n            return (\r\n                <Table className={this.props.classes.replyMessageTable} size=\"small\" aria-label=\"replies\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>From</TableCell>\r\n                            <TableCell>Subject</TableCell>\r\n                            <TableCell />\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {messages.replies.map((replies: any, index: number) => (\r\n                            <TableRow key={index} selected={this.state.activeReply == index ? true : false}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {messages.user.userName}\r\n                                </TableCell>\r\n                                <TableCell>{replies.subject}</TableCell>\r\n                                <TableCell>\r\n                                    <Button onClick={() => this.handleShowReply(index)}>\r\n                                        View\r\n                                    </Button>\r\n                                    <Button onClick={() => this.handleDelete(replies.id,)}>\r\n                                        Delete\r\n                                    </Button>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            )\r\n        } else {\r\n            return (\r\n                null\r\n            )\r\n        }\r\n    }\r\n    render() {\r\n        console.log(this.state.message, \"Row message\")\r\n        return (\r\n            <React.Fragment>\r\n                <TableRow>\r\n                    <TableCell>\r\n                        <IconButton aria-label=\"expand row\" size=\"small\" onClick={this.handleOpen}>\r\n                            {this.state.isOpen ? <KeyboardArrowUpIcon /> : <KeyboardArrowDownIcon />}\r\n                        </IconButton>\r\n                    </TableCell>\r\n                    <TableCell component=\"th\" scope=\"row\">\r\n                        {this.state.message.user.userName}\r\n                    </TableCell>\r\n                    <TableCell align=\"right\">{this.state.message.subject}</TableCell>\r\n                    <TableCell\r\n                        align=\"right\">\r\n                        <Button\r\n                            onClick={() => this.props.replyToMessage(this.state.message)}\r\n                        >\r\n                        Reply\r\n                        </Button>\r\n                        {this.state.message.senderId == this.props.loggedInUserId ? \r\n                        <Button onClick={() => this.props.updateMessage(this.state.message)}>\r\n                            Update\r\n                        </Button> \r\n                        : null\r\n                        }\r\n                        <Button onClick={() => this.props.deleteMessage(this.state.message.id, true)}>\r\n                            Delete\r\n                        </Button>\r\n                    </TableCell>\r\n                </TableRow>\r\n                <TableRow>\r\n                    <TableCell style={{ paddingBottom: 0, paddingTop: 0 }} colSpan={6}>\r\n                        <Collapse in={this.state.isOpen} timeout=\"auto\" unmountOnExit>\r\n                            <Box margin={1}>\r\n                                {\r\n                                    this.state.showReply ? null\r\n                                        : <TextField\r\n                                            id=\"messageBody\"\r\n                                            label=\"Message\"\r\n                                            defaultValue={this.state.message.messageBody}\r\n                                            variant=\"outlined\"\r\n                                            InputProps={{\r\n                                                readOnly: true\r\n                                            }}\r\n                                            multiline\r\n                                            rows={10}\r\n                                            rowsMax={10}\r\n                                            fullWidth\r\n                                        />\r\n                                }\r\n                                {this.replyBodyDisplay(this.state.message)}\r\n                                {this.replyConductor(this.state.message)}\r\n                            </Box>\r\n                        </Collapse>\r\n                    </TableCell>\r\n                </TableRow>\r\n            </React.Fragment>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nclass MessageDisplay extends React.Component<myProps, myState>{\r\n    constructor(props: myProps) {\r\n        super(props)\r\n        this.state = {\r\n            messages: this.props.conversation.messages,\r\n            showReply: false,\r\n            page: 0,\r\n            rowsPerPage: 10,\r\n            isOpen: false,\r\n            isReply: false,\r\n            isUpdate: false,\r\n            parentMessage: null,\r\n            messageToUpdate: null,\r\n        }\r\n    }\r\n    //for paginate if i get to it\r\n    handleChangePage = (event: unknown, newPage: number) => {\r\n        this.setState({ page: newPage });\r\n    };\r\n\r\n    handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        this.setState({ rowsPerPage: +event.target.value });\r\n        this.setState({ page: 0 });\r\n    };\r\n\r\n\r\n    displayConductor = (classes: any) => {\r\n        if (this.state.isReply) {\r\n            return (\r\n                <ReplyMessage token={this.props.token} parentMessage={this.state.parentMessage} replyToMessage={this.replyToMessage} />\r\n            )\r\n        } else if(this.state.isUpdate){\r\n            return (\r\n                <UpdateMessage token={this.props.token} messageToUpdate={this.state.messageToUpdate} updateMessage={this.updateMessage} />\r\n            )\r\n        }else{\r\n            return (\r\n                <TableContainer>\r\n                    <Table aria-label=\"collapsible table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell />\r\n                                <TableCell>From</TableCell>\r\n                                <TableCell align=\"right\">Subject</TableCell>\r\n                                <TableCell />\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                            {console.log(this.state.messages, \"The State is display\")}\r\n                            {this.state.messages ? this.state.messages.map((message: any, index: number) => (\r\n                                <Row\r\n                                    key={index}\r\n                                    message={message}\r\n                                    classes={classes}\r\n                                    replyToMessage={this.replyToMessage}\r\n                                    deleteMessage={this.props.deleteMessage}\r\n                                    updateMessage={this.updateMessage}\r\n                                    loggedInUserId={this.props.loggedInUserId}\r\n                                />))\r\n                                : <Typography variant=\"h4\">Loading</Typography>\r\n                            }\r\n                        </TableBody>\r\n                    </Table>\r\n                </TableContainer>\r\n\r\n            );\r\n        };\r\n    }\r\n\r\n\r\n    updateMessageList = () => {\r\n        let data = this.props.conversation.messages.map((data: any) => (\r\n            {\r\n                id: data.senderId,\r\n                from: data.senderId,\r\n                subject: data.subject\r\n\r\n            }\r\n        ))\r\n        this.setState({ messages: data })\r\n    }\r\n\r\n    //with the message? allows this function to be multi purpose. So when I call the function in the Row class I pass the message the user wants to reply/update, set it to the state. then switch the view to the reply/update view. Once the user send/submits their reply/update i call this function again. This time is dose not pass a message skips setting the state and just switches back to the inbox view.\r\n    //Downside is this file is code heavy but pertty cool though.\r\n    replyToMessage = (message?: any) => {\r\n        if (message) {\r\n            this.setState({ parentMessage: message })\r\n        }\r\n        this.setState({ isReply: !this.state.isReply })\r\n    }\r\n\r\n    updateMessage = (message?: any) => {\r\n        if (message) {\r\n            this.setState({ messageToUpdate: message })\r\n        }\r\n        this.setState({ isUpdate: !this.state.isUpdate })\r\n    }\r\n\r\n\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n\r\n        return (\r\n            this.displayConductor(classes)\r\n        );\r\n    };\r\n}\r\nexport default withStyles(styles)(MessageDisplay)\r\n","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Nav\\SideNav.tsx",["123","124","125","126","127"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\SendMessage.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\index.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\sunsetTheme.tsx",["128","129"],"import { unstable_createMuiStrictModeTheme as createMuiTheme } from '@material-ui/core';\r\nimport { orange, yellow} from '@material-ui/core/colors';\r\n\r\n\r\n\r\nconst sunsetTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'light',\r\n    text: {\r\n      primary: \"#2a2523\"\r\n    },\r\n    background: {\r\n      default: \"#424242\"\r\n    },\r\n    primary: {\r\n      main: '#be4821',\r\n    },\r\n    secondary: {\r\n      main: '#f1b808',\r\n    },\r\n    contrastThreshold: 3,\r\n    tonalOffset: 0.2,\r\n  },\r\n  overrides: {\r\n    MuiInputBase: {\r\n      root: {\r\n        backgroundColor: '#be4821',\r\n        borderColor: \"#f1b808\",\r\n        marginTop: 10,\r\n        marginBottom: 10,\r\n        \"&$focused\": {\r\n          borderColor: '#f1b808',\r\n               \"&::placeholder\": {\r\n            color: \"#f1b808\"\r\n        }},\r\n      },\r\n      input: {\r\n \r\n      }\r\n    },\r\n    MuiMenu: {\r\n      list: {\r\n          backgroundColor: \"#be4821\"\r\n      }\r\n\r\n    },\r\n    MuiCssBaseline: {\r\n      \"@global\": {\r\n        body: {\r\n          height: \"100vh\",\r\n          backgroundImage:\r\n            \"radial-gradient(circle, rgba(241,184,8,0.9) 0%, rgba(190,72,33,0.835171568627451) 47%, rgba(154,43,3,0.9) 100%)\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n});\r\n\r\nexport default sunsetTheme;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\mainTheme.tsx",["130","131","132","133"],"import { createMuiTheme, ThemeProvider } from '@material-ui/core';\r\nimport { orange, yellow } from '@material-ui/core/colors';\r\nimport { DensityTypes } from '@material-ui/data-grid';\r\n\r\n\r\n//ADDS CUSTOM PROPERTIES TOO CREATEMUITHEME\r\n\r\n// declare module '@material-ui/core/styles/createMuiTheme' {\r\n//     interface Theme {\r\n//       sideBar: {\r\n//         danger: React.CSSProperties['color'],\r\n//       }\r\n//     }\r\n//     interface ThemeOptions {\r\n//       sideBar: {\r\n//         danger: React.CSSProperties['color']\r\n//       }\r\n//     }\r\n//   }\r\n\r\n//   declare module \"@material-ui/core/styles/createPalette\" {\r\n//     interface Palette {\r\n//       neutral: Palette['primary'];\r\n//     }\r\n//     interface PaletteOptions {\r\n//       neutral: PaletteOptions['primary'];\r\n//     }\r\n//   }\r\n\r\nconst mainTheme = createMuiTheme({\r\n\r\n  palette: {\r\n    type: 'light',\r\n    text: {\r\n      primary: \"#fff\"\r\n    },\r\n    background: {\r\n      default: \"#424242\"\r\n    },\r\n    primary: {\r\n      main: '#152B38',\r\n    },\r\n    secondary: {\r\n      main: '#fff',\r\n    },\r\n    contrastThreshold: 3,\r\n    tonalOffset: 0.2,\r\n  },\r\n  overrides: {\r\n    MuiInputBase: {\r\n      root: {\r\n        backgroundColor: '#152B38',\r\n        borderColor: \"#fff\",\r\n        marginTop: 10,\r\n        marginBottom: 10,\r\n        \"&$focused\": {\r\n          borderColor: '#fff',\r\n               \"&::placeholder\": {\r\n            color: \"#fff\"\r\n        }},\r\n      },\r\n      input: {\r\n \r\n      }\r\n    },\r\n    MuiMenu: {\r\n      list: {\r\n          backgroundColor: \"#152B38\"\r\n      }\r\n\r\n    },\r\n    MuiCssBaseline: {\r\n      \"@global\": {\r\n        body: {\r\n          height: \"100vh\",\r\n          backgroundImage:\r\n            \"linear-gradient(333deg, rgba(7,8,7,0.9) 0%, rgba(82,79,78,0.8323704481792717) 66%, rgba(9,9,9,0.9) 100%)\"\r\n        }\r\n      }\r\n    }\r\n  },\r\n\r\n});\r\n\r\nexport default mainTheme;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\theme\\darkTheme.tsx",["134","135"],"// import createMuiTheme from '@material-ui/core/styles/createMuiTheme';\r\nimport { createMuiTheme } from '@material-ui/core';\r\nimport { orange, yellow} from '@material-ui/core/colors';\r\n\r\n\r\nconst darkTheme = createMuiTheme({\r\n  palette: {\r\n    type: 'dark',   \r\n    primary: {\r\n      main: '#152B38',\r\n    },\r\n    secondary: {\r\n      main: '#65C5C7',\r\n    },\r\n    contrastThreshold: 3,\r\n    tonalOffset: 0.2,\r\n  },\r\n});\r\n\r\nexport default darkTheme;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\ReplyMessage.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\UpdateMessage.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\GameLibrary\\GameLibrary.tsx",["136"],"import React from \"react\";\r\nimport { Theme, createStyles, makeStyles, withStyles } from '@material-ui/core/styles';\r\nimport GridList from '@material-ui/core/GridList';\r\nimport GridListTile from '@material-ui/core/GridListTile';\r\nimport GridListTileBar from '@material-ui/core/GridListTileBar';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport { Button } from \"@material-ui/core\"\r\nimport { Redirect } from \"react-router-dom\"\r\nimport gameData from \"./createLibrary\"\r\n// const data = require((\"../../Games/data.json\"))\r\n\r\n\r\nconst styles = (theme: Theme) => createStyles({\r\n    root: {\r\n        display: 'flex',\r\n        flexWrap: 'wrap',\r\n        overflow: \"none\",\r\n        justifyContent: 'space-around',\r\n        width: \"90%\",\r\n        height: \"90%\",\r\n    },\r\n    gridList: {\r\n        width: \"90%\",\r\n        height: \"90%\",\r\n    },\r\n    icon: {\r\n        color: 'rgba(255, 255, 255, 0.54)',\r\n    },\r\n});\r\n\r\ntype myState = {\r\n    token: string;\r\n    redirect: string;\r\n}\r\n\r\ntype myProps = {\r\n    token: string;\r\n    classes: any;\r\n}\r\n\r\nclass GameLibrary extends React.Component<myProps, myState>{\r\n    constructor(props: myProps) {\r\n        super(props)\r\n        this.state = {\r\n            token: \"\",\r\n            redirect: \"\",\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { classes } = this.props;\r\n        if (this.state.redirect) {\r\n            return <Redirect to={this.state.redirect} />\r\n        }\r\n        return (\r\n            <div className={classes.root}>\r\n                <GridList cellHeight={180} className={classes.gridList}>\r\n                    <GridListTile key=\"Subheader\" cols={2} style={{ height: 'auto' }}>\r\n                        <ListSubheader component=\"div\">Game Library</ListSubheader>\r\n                    </GridListTile>\r\n                    {gameData.map((game: any) => (\r\n                        <GridListTile key={game.id}>\r\n                                <img src={game.image} alt={game.name} />\r\n                            <Button onClick={() => this.setState({ redirect: `/${game.name}` })}>\r\n                            </Button>\r\n                            <GridListTileBar\r\n                                title={game.name}\r\n                                subtitle={ \r\n                                <Button onClick={() => this.setState({ redirect: `/playgame/${game.name}` })}>\r\n                                Play\r\n                                </Button>\r\n                                }\r\n                            />\r\n                        </GridListTile>\r\n                    ))}\r\n                </GridList>\r\n            </div>\r\n        );\r\n\r\n    }\r\n}\r\n\r\n\r\nexport default withStyles(styles)(GameLibrary);","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\GameLibrary\\createLibrary.tsx",["137"],"import React from \"react\";\r\nimport CircleBlaster from \"../../assets/CircleBlaster.jpg\"\r\n\r\n    const gameData = [\r\n        {id:0, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:1, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:2, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:3, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:4, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:5, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:6, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:7, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:8, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:9, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:10, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:11, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:12, name: \"CircleBlaster\",image: CircleBlaster},\r\n        {id:13, name: \"CircleBlaster\",image: CircleBlaster},\r\n    ]\r\n\r\n    export default gameData\r\n","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\GameLibrary\\GameDisplay.tsx",["138","139","140","141","142","143","144","145","146"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\CircleBlaster.jsx",["147","148","149","150","151","152"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport gsap from \"gsap\";\r\nimport \"./gameStyle.css\"\r\nimport { Button, Typography } from \"@material-ui/core\"\r\n\r\n\r\nconst CircleBlaster = (props) => {\r\n    let [score, setScore] = useState(0)\r\n    let [highScore, setHighScore] = useState(0)\r\n    let [isPlaying, setIsPlaying] = useState(false)\r\n    let [isSubmit, setIsSubmit] = useState(false)\r\n    let [gameOver, setGameOver] = useState(false)\r\n    const [projectiles, setProjectiles] = useState([])\r\n    const [enemies, setEnemies] = useState([])\r\n    const [particles, setParticles] = useState([])\r\n    const getWidth = () => window.innerWidth\r\n    const getHeight = () => window.innerHeight\r\n    let [width, setWidth] = useState(getWidth())\r\n    let [height, setHeight] = useState(getHeight())\r\n    let prevent = 1;\r\n\r\n    const canvasRef = useRef(null)\r\n    const friction = 0.99;\r\n    let player;\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        canvas.style.width = '100%';\r\n        canvas.style.height = '100%';\r\n        canvas.width = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n        canvasContext.fillStyle = \"rgba(0,0,0,1)\"\r\n        canvasContext.fillRect(0, 0, canvas.width, canvas.height)\r\n    }, [prevent])\r\n\r\n    useEffect(() => {\r\n        buildGame();\r\n    }, [isPlaying])\r\n\r\n\r\n    useEffect(() => {\r\n        const resizeListener = () => {\r\n            setWidth(getWidth())\r\n            setHeight(getHeight())\r\n        };\r\n        window.addEventListener(\"resize\", resizeListener)\r\n\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resizeListener)\r\n        }\r\n    }, [width, height])\r\n\r\n    class Player {\r\n        constructor(x, y, radius, color) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n        }\r\n\r\n        draw() {\r\n\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n    }\r\n\r\n    class Projectile {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n        update() {\r\n            this.draw()\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n        }\r\n    }\r\n\r\n\r\n    class Enemy {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n\r\n        update() {\r\n            this.draw()\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n        }\r\n\r\n    }\r\n\r\n    class Particle {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n            this.alpha = 1\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.save()\r\n            canvasContext.globalAlpha = this.alpha\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n            canvasContext.restore()\r\n        }\r\n\r\n        update() {\r\n            this.draw()\r\n            this.velocity.x *= friction\r\n            this.velocity.y *= friction\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n            this.alpha -= 0.01\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function setGameWindow() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        canvas.style.width = '100%';\r\n        canvas.style.height = '100%';\r\n        canvas.width = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n    }\r\n\r\n    function startGame() {\r\n        setIsPlaying(prevState => !prevState)\r\n\r\n    }\r\n\r\n    function buildGame() {\r\n        setGameWindow();\r\n\r\n        const canvas = canvasRef.current;\r\n\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n\r\n        const x = canvas.width / 2\r\n\r\n        const y = canvas.height / 2\r\n\r\n        player = new Player(x, y, 10, \"red\",)\r\n        spawnEnemies()\r\n        animate()\r\n    }\r\n\r\n\r\n    function spawnEnemies() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n\r\n        let newEnemies = enemies;\r\n        // const canvas = canvasRef.current;\r\n        // const canvasContext = canvasRef.current.getContext(\"2d\")\r\n        setInterval(() => {\r\n            const radius = Math.random() * (50 - 10) + 10\r\n\r\n            let x;\r\n            let y;\r\n\r\n            if (Math.random() < 0.5) {\r\n\r\n                x = Math.random() < 0.5 ? 0 - radius : canvas.width + radius\r\n                y = Math.random() * canvas.height\r\n            } else {\r\n                x = Math.random() * canvas.width\r\n                y = Math.random() < 0.5 ? 0 - radius : canvas.height + radius\r\n            }\r\n            const color = `hsl(${Math.random() * 360} , 50%, 50%)`\r\n\r\n            const angle = Math.atan2(\r\n                canvas.height / 2 - y,\r\n                canvas.width / 2 - x)\r\n            const velocity = {\r\n                x: Math.cos(angle),\r\n                y: Math.sin(angle)\r\n            }\r\n            newEnemies.push(new Enemy(x, y, radius, color, velocity))\r\n            setEnemies(newEnemies)\r\n        }, isPlaying ? 1000 : 1000000000)\r\n    }\r\n\r\n\r\n    function animate() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        let animeationId;\r\n        let newParticles = particles\r\n        let newProjectiles = projectiles\r\n        let newEnemies = enemies\r\n\r\n\r\n        animeationId = requestAnimationFrame(animate)\r\n        canvasContext.fillStyle = \"rgba(0,0,0,0.2)\"\r\n        canvasContext.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n        player.draw();\r\n\r\n        if (!isPlaying) {\r\n            cancelAnimationFrame(animeationId)\r\n        }\r\n        //create explosions\r\n        newParticles.forEach((particle, index) => {\r\n            if (particle.alpha <= 0) {\r\n                particles.splice(index, 1)\r\n                setParticles(newParticles)\r\n\r\n            } else {\r\n                particle.update()\r\n            }\r\n        });\r\n        //create projectiles\r\n        newProjectiles.forEach((projectile, index) => {\r\n            projectile.update()\r\n\r\n            if (projectile.x + projectile.radius < 0 ||\r\n                projectile.x - projectile.radius > canvas.width ||\r\n                projectile.y + projectile.radius < 0 ||\r\n                projectile.y - projectile.radius > canvas.height) {\r\n                setTimeout(() => {\r\n                    newProjectiles.splice(index, 1)\r\n                    setProjectiles(newProjectiles)\r\n                }, 0)\r\n            }\r\n\r\n        })\r\n\r\n        newEnemies.forEach((enemy, index) => {\r\n            enemy.update()\r\n\r\n            //gets the distance from an enemy to the player\r\n            const dist = Math.hypot(player.x - enemy.x, player.y - enemy.y)\r\n\r\n            if (dist - enemy.radius - player.radius < 1) {\r\n                cancelAnimationFrame(animeationId)\r\n                setGameOver(true)\r\n                setIsPlaying(false)\r\n            }\r\n\r\n            newProjectiles.forEach((projectile, pIndex) => {\r\n                const dist = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y)\r\n                //Peojectiles hit enemy\r\n                if (dist - enemy.radius - projectile.radius < 5) {\r\n\r\n\r\n                    //create explosions\r\n                    for (let i = 0; i < enemy.radius * 2; i++) {\r\n                        newParticles.push(new Particle(\r\n                            projectile.x, // spawn location projectiles x\r\n                            projectile.y, // spawn location projectiles y\r\n                            Math.random() * 2, //radius(size) of particle\r\n                            enemy.color, { //makes explosion same color as enemy\r\n                            x: (Math.random() - 0.5) * (Math.random() * 8),//x volocity\r\n                            y: (Math.random() - 0.5) * (Math.random() * 8) //y volocity\r\n                        }))\r\n                    }\r\n                    setParticles(newParticles)\r\n\r\n                    if (enemy.radius - 10 > 5) {\r\n                        //the score\r\n                        setScore(score += 100)\r\n                        gsap.to(enemy, { radius: enemy.radius - 10 })\r\n                        setTimeout(() => {\r\n                            newProjectiles.splice(pIndex, 1)\r\n                            setProjectiles(newProjectiles)\r\n                        }, 0)\r\n                    }\r\n                    else {\r\n                        setScore(score += 250)\r\n                        setTimeout(() => {\r\n                            newEnemies.splice(index, 1)\r\n                            newProjectiles.splice(pIndex, 1)\r\n                            setEnemies(newEnemies)\r\n                            setProjectiles(newProjectiles)\r\n                        }, 0)\r\n                    }\r\n                }\r\n\r\n            })\r\n        })\r\n    }\r\n\r\n    function handleClick(event) {\r\n        const canvas = canvasRef.current\r\n        let newProjectiles = projectiles\r\n        const angle = Math.atan2(\r\n            event.clientY - height / 2,\r\n            event.clientX - width / 2)\r\n        const velocity = {\r\n            x: Math.cos(angle) * 5,\r\n            y: Math.sin(angle) * 5\r\n        }\r\n        newProjectiles.push(\r\n            new Projectile(\r\n                canvas.width / 2,\r\n                canvas.height / 2,\r\n                5,\r\n                \"white\",\r\n                velocity\r\n            )\r\n        )\r\n        setProjectiles(newProjectiles)\r\n\r\n    }\r\n\r\n    function newGame(){\r\n        setProjectiles([])\r\n        setEnemies([])\r\n        setParticles([])\r\n        setIsPlaying(true)\r\n        setGameOver(false)\r\n    }\r\n\r\n    function submitScore(){\r\n        if(!isSubmit){\r\n            props.createOrUpdateScore(\"CircleBlaster\", score)\r\n            setIsSubmit(true)\r\n        }\r\n    }\r\n\r\n    function displayInfo() {\r\n        if (!isPlaying && gameOver) {\r\n            return (\r\n                <div className=\"gameInfo\">\r\n                    <Typography>Game Over!</Typography>\r\n                    <Typography className=\"warning\">this game dose not work well when not full screen! Also plenty of little bugs</Typography>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => newGame()}>New Game</Button>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => submitScore()}>{isSubmit ? \"Score updated!\": \"Update Score\"}</Button>\r\n\r\n                </div>\r\n            )\r\n        } else if (!isPlaying) {\r\n            return (\r\n\r\n                <div className=\"gameInfo\">\r\n                    <Typography>Welcome to CircleBlaster!</Typography>\r\n                    <Typography>Click on the screen to fire at the enemies!</Typography>\r\n                    <Typography>its all over once they crash into you! destroy them before that happens!!</Typography>\r\n                    <Typography className=\"warning\">this game dose not work well when not full screen! Also plenty of litle bugs</Typography>\r\n                    <Button variant=\"contained\" color=\"primary\" onClick={() => startGame()}>Play Game</Button>\r\n                </div>\r\n            )\r\n        }\r\n    }\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"score\">\r\n                <span>Score:  </span>\r\n                <span>{score}</span>\r\n            </div>\r\n            <canvas ref={canvasRef}{...props} onClick={(e) => handleClick(e)}></canvas>\r\n            {displayInfo()}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default CircleBlaster;\r\n",["153","154"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Admin\\AdminMenu.tsx",["155","156","157"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\helpers\\enviroment.js",["158","159","160"],{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":5,"column":17,"nodeType":"167","messageId":"168","endLine":5,"endColumn":30},{"ruleId":"165","severity":1,"message":"169","line":6,"column":16,"nodeType":"167","messageId":"168","endLine":6,"endColumn":22},{"ruleId":"170","severity":1,"message":"171","line":29,"column":54,"nodeType":"172","messageId":"173","endLine":29,"endColumn":56},{"ruleId":"170","severity":1,"message":"171","line":60,"column":54,"nodeType":"172","messageId":"173","endLine":60,"endColumn":56},{"ruleId":"170","severity":1,"message":"171","line":84,"column":33,"nodeType":"172","messageId":"173","endLine":84,"endColumn":35},{"ruleId":"165","severity":1,"message":"174","line":3,"column":8,"nodeType":"167","messageId":"168","endLine":3,"endColumn":12},{"ruleId":"165","severity":1,"message":"175","line":2,"column":8,"nodeType":"167","messageId":"168","endLine":2,"endColumn":13},{"ruleId":"165","severity":1,"message":"176","line":4,"column":10,"nodeType":"167","messageId":"168","endLine":4,"endColumn":18},{"ruleId":"165","severity":1,"message":"177","line":4,"column":20,"nodeType":"167","messageId":"168","endLine":4,"endColumn":26},{"ruleId":"165","severity":1,"message":"174","line":4,"column":22,"nodeType":"167","messageId":"168","endLine":4,"endColumn":26},{"ruleId":"165","severity":1,"message":"174","line":3,"column":8,"nodeType":"167","messageId":"168","endLine":3,"endColumn":12},{"ruleId":"165","severity":1,"message":"178","line":17,"column":10,"nodeType":"167","messageId":"168","endLine":17,"endColumn":18},{"ruleId":"165","severity":1,"message":"179","line":17,"column":20,"nodeType":"167","messageId":"168","endLine":17,"endColumn":24},{"ruleId":"170","severity":1,"message":"171","line":109,"column":43,"nodeType":"172","messageId":"173","endLine":109,"endColumn":45},{"ruleId":"170","severity":1,"message":"171","line":117,"column":31,"nodeType":"172","messageId":"173","endLine":117,"endColumn":33},{"ruleId":"170","severity":1,"message":"171","line":192,"column":84,"nodeType":"172","messageId":"173","endLine":192,"endColumn":86},{"ruleId":"170","severity":1,"message":"171","line":237,"column":54,"nodeType":"172","messageId":"173","endLine":237,"endColumn":56},{"ruleId":"165","severity":1,"message":"180","line":4,"column":8,"nodeType":"167","messageId":"168","endLine":4,"endColumn":21},{"ruleId":"165","severity":1,"message":"181","line":13,"column":8,"nodeType":"167","messageId":"168","endLine":13,"endColumn":16},{"ruleId":"165","severity":1,"message":"178","line":16,"column":10,"nodeType":"167","messageId":"168","endLine":16,"endColumn":18},{"ruleId":"170","severity":1,"message":"171","line":77,"column":72,"nodeType":"172","messageId":"173","endLine":77,"endColumn":74},{"ruleId":"170","severity":1,"message":"171","line":94,"column":38,"nodeType":"172","messageId":"173","endLine":94,"endColumn":40},{"ruleId":"165","severity":1,"message":"182","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":16},{"ruleId":"165","severity":1,"message":"183","line":2,"column":18,"nodeType":"167","messageId":"168","endLine":2,"endColumn":24},{"ruleId":"165","severity":1,"message":"166","line":1,"column":26,"nodeType":"167","messageId":"168","endLine":1,"endColumn":39},{"ruleId":"165","severity":1,"message":"182","line":2,"column":10,"nodeType":"167","messageId":"168","endLine":2,"endColumn":16},{"ruleId":"165","severity":1,"message":"183","line":2,"column":18,"nodeType":"167","messageId":"168","endLine":2,"endColumn":24},{"ruleId":"165","severity":1,"message":"184","line":3,"column":10,"nodeType":"167","messageId":"168","endLine":3,"endColumn":22},{"ruleId":"165","severity":1,"message":"182","line":3,"column":10,"nodeType":"167","messageId":"168","endLine":3,"endColumn":16},{"ruleId":"165","severity":1,"message":"183","line":3,"column":18,"nodeType":"167","messageId":"168","endLine":3,"endColumn":24},{"ruleId":"165","severity":1,"message":"185","line":2,"column":31,"nodeType":"167","messageId":"168","endLine":2,"endColumn":41},{"ruleId":"165","severity":1,"message":"186","line":1,"column":8,"nodeType":"167","messageId":"168","endLine":1,"endColumn":13},{"ruleId":"165","severity":1,"message":"187","line":1,"column":8,"nodeType":"167","messageId":"168","endLine":1,"endColumn":17},{"ruleId":"165","severity":1,"message":"188","line":3,"column":10,"nodeType":"167","messageId":"168","endLine":3,"endColumn":15},{"ruleId":"165","severity":1,"message":"189","line":3,"column":17,"nodeType":"167","messageId":"168","endLine":3,"endColumn":23},{"ruleId":"165","severity":1,"message":"190","line":3,"column":42,"nodeType":"167","messageId":"168","endLine":3,"endColumn":48},{"ruleId":"165","severity":1,"message":"178","line":3,"column":50,"nodeType":"167","messageId":"168","endLine":3,"endColumn":58},{"ruleId":"170","severity":1,"message":"171","line":56,"column":52,"nodeType":"172","messageId":"173","endLine":56,"endColumn":54},{"ruleId":"191","severity":1,"message":"192","line":75,"column":61,"nodeType":"193","messageId":"194","endLine":75,"endColumn":63},{"ruleId":"170","severity":1,"message":"171","line":76,"column":35,"nodeType":"172","messageId":"173","endLine":76,"endColumn":37},{"ruleId":"165","severity":1,"message":"195","line":134,"column":15,"nodeType":"167","messageId":"168","endLine":134,"endColumn":19},{"ruleId":"196","severity":1,"message":"197","line":9,"column":10,"nodeType":"167","messageId":"168","endLine":9,"endColumn":19},{"ruleId":"196","severity":1,"message":"198","line":9,"column":21,"nodeType":"167","messageId":"168","endLine":9,"endColumn":33},{"ruleId":"199","severity":1,"message":"200","line":39,"column":8,"nodeType":"201","endLine":39,"endColumn":19,"suggestions":"202"},{"ruleId":"196","severity":1,"message":"203","line":181,"column":15,"nodeType":"167","messageId":"168","endLine":181,"endColumn":28},{"ruleId":"196","severity":1,"message":"203","line":198,"column":15,"nodeType":"167","messageId":"168","endLine":198,"endColumn":28},{"ruleId":"196","severity":1,"message":"203","line":212,"column":15,"nodeType":"167","messageId":"168","endLine":212,"endColumn":28},{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"204","line":2,"column":157,"nodeType":"167","messageId":"168","endLine":2,"endColumn":171},{"ruleId":"170","severity":1,"message":"171","line":83,"column":38,"nodeType":"172","messageId":"173","endLine":83,"endColumn":40},{"ruleId":"205","severity":1,"message":"206","line":146,"column":15,"nodeType":"207","messageId":"208","endLine":146,"endColumn":44},{"ruleId":"209","severity":1,"message":"210","line":3,"column":1,"nodeType":"211","messageId":"212","endLine":13,"endColumn":2},{"ruleId":"213","severity":1,"message":"214","line":3,"column":1,"nodeType":"167","messageId":"215","endLine":3,"endColumn":6},{"ruleId":"216","severity":1,"message":"217","line":6,"column":1,"nodeType":"218","messageId":"219","endLine":13,"endColumn":2},"no-native-reassign",["220"],"no-negated-in-lhs",["221"],"@typescript-eslint/no-unused-vars","'ThemeProvider' is defined but never used.","Identifier","unusedVar","'Button' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'Grid' is defined but never used.","'Paper' is defined but never used.","'DataGrid' is defined but never used.","'ColDef' is defined but never used.","'Redirect' is defined but never used.","'Link' is defined but never used.","'ListSubheader' is defined but never used.","'SendIcon' is defined but never used.","'orange' is defined but never used.","'yellow' is defined but never used.","'DensityTypes' is defined but never used.","'makeStyles' is defined but never used.","'React' is defined but never used.","'userEvent' is defined but never used.","'Route' is defined but never used.","'Switch' is defined but never used.","'Router' is defined but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'path' is assigned a value but never used.","no-unused-vars","'highScore' is assigned a value but never used.","'setHighScore' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'buildGame'. Either include it or remove the dependency array.","ArrayExpression",["222"],"'canvasContext' is assigned a value but never used.","'createMuiTheme' is defined but never used.","no-template-curly-in-string","Unexpected template string expression.","Literal","unexpectedTemplateExpression","no-labels","Unexpected labeled statement.","LabeledStatement","unexpectedLabel","no-unused-labels","'https:' is defined but never used.","unused","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-global-assign","no-unsafe-negation",{"desc":"223","fix":"224"},"Update the dependencies array to be: [buildGame, isPlaying]",{"range":"225","text":"226"},[1394,1405],"[buildGame, isPlaying]"]