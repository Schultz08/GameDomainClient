[{"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\index.tsx":"1","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\reportWebVitals.ts":"2","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\App.tsx":"3","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\index.tsx":"4","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Auth\\Auth.tsx":"5","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\myGame.jsx":"6","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoards.tsx":"7","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoardDisplay.tsx":"8","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\Message.tsx":"9","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\MessageDisplay.tsx":"10","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Nav\\SideNav.tsx":"11","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\SendMessage.tsx":"12"},{"size":500,"mtime":499162500000,"results":"13","hashOfConfig":"14"},{"size":425,"mtime":499162500000,"results":"15","hashOfConfig":"14"},{"size":5308,"mtime":1610166336071,"results":"16","hashOfConfig":"14"},{"size":286,"mtime":1609963680331,"results":"17","hashOfConfig":"14"},{"size":5429,"mtime":1610165961833,"results":"18","hashOfConfig":"14"},{"size":11712,"mtime":1609962404875,"results":"19","hashOfConfig":"14"},{"size":684,"mtime":1609172966155,"results":"20","hashOfConfig":"14"},{"size":1425,"mtime":1610062302468,"results":"21","hashOfConfig":"14"},{"size":2673,"mtime":1610226344058,"results":"22","hashOfConfig":"14"},{"size":7432,"mtime":1610227421696,"results":"23","hashOfConfig":"14"},{"size":6362,"mtime":1610146720170,"results":"24","hashOfConfig":"14"},{"size":5137,"mtime":1610167331172,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},"1g8q9lt",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"28"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"40"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"28"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"28"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"51","messages":"52","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"53","usedDeprecatedRules":"28"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\index.tsx",[],["56","57"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\reportWebVitals.ts",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\App.tsx",["58","59","60"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\index.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Auth\\Auth.tsx",[],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Games\\myGame.jsx",["61","62","63","64"],"import React, { useRef, useEffect, useState } from \"react\";\r\nimport gsap from \"gsap\";\r\nimport \"./gameStyle.css\"\r\n\r\nconst Canvas = props => {\r\n    let [score, setScore] = useState(0)\r\n    let [isPlaying, setIsPlaying] = useState(false)\r\n    const [projectiles, setProjectiles] = useState([])\r\n    const [enemies, setEnemies] = useState([])\r\n    const [particles, setParticles] = useState([])\r\n    const getWidth = () => window.innerWidth\r\n    const getHeight = () => window.innerHeight\r\n    let [width, setWidth] = useState(getWidth())\r\n    let [height, setHeight] = useState(getHeight())\r\n    let prevent = 1;\r\n\r\n    const canvasRef = useRef(null)\r\n    const friction = 0.99;\r\n    let player;\r\n\r\n    useEffect(() => {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        canvas.style.width ='100%';\r\n        canvas.style.height='100%';\r\n        canvas.width  = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n        canvasContext.fillStyle = \"rgba(0,0,0,1)\"\r\n        canvasContext.fillRect(0, 0, canvas.width, canvas.height)\r\n    },[prevent])\r\n\r\n    useEffect(() => {\r\n        buildGame();\r\n    },[isPlaying])\r\n\r\n\r\n    useEffect(() => {\r\n        const resizeListener = () => {\r\n            setWidth(getWidth())\r\n            setHeight(getHeight())\r\n        };\r\n        window.addEventListener(\"resize\", resizeListener)\r\n\r\n        return () => {\r\n            window.removeEventListener(\"resize\", resizeListener)\r\n        }\r\n    },[width, height])\r\n\r\n    class Player {\r\n        constructor(x, y, radius, color) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n        }\r\n\r\n        draw() {\r\n\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n    }\r\n\r\n    class Projectile {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n        update() {\r\n            this.draw()\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n        }\r\n    }\r\n\r\n\r\n    class Enemy {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n        }\r\n\r\n        update() {\r\n            this.draw()\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n        }\r\n\r\n    }\r\n\r\n    class Particle {\r\n        constructor(x, y, radius, color, velocity) {\r\n            this.x = x\r\n            this.y = y\r\n            this.radius = radius\r\n            this.color = color\r\n            this.velocity = velocity\r\n            this.alpha = 1\r\n        }\r\n\r\n        draw() {\r\n            const canvasContext = canvasRef.current.getContext(\"2d\")\r\n            canvasContext.save()\r\n            canvasContext.globalAlpha = this.alpha\r\n            canvasContext.beginPath()\r\n            canvasContext.arc(\r\n                this.x,\r\n                this.y,\r\n                this.radius,\r\n                0,\r\n                Math.PI * 2,\r\n                false)\r\n            canvasContext.fillStyle = this.color\r\n            canvasContext.fill()\r\n            canvasContext.restore()\r\n        }\r\n\r\n        update() {\r\n            this.draw()\r\n            this.velocity.x *= friction\r\n            this.velocity.y *= friction\r\n            this.x = this.x + this.velocity.x\r\n            this.y = this.y + this.velocity.y\r\n            this.alpha -= 0.01\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n    function setGameWindow(){\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        canvas.style.width ='100%';\r\n        canvas.style.height='100%';\r\n        canvas.width  = canvas.offsetWidth;\r\n        canvas.height = canvas.offsetHeight;\r\n    }\r\n\r\n    function startGame() {\r\n        setIsPlaying(prevState => !prevState)\r\n        \r\n    }\r\n    \r\n    function buildGame() {\r\n        setGameWindow();\r\n        console.log(\"1\",isPlaying)\r\n\r\n        const canvas = canvasRef.current;\r\n        console.log(\"2\",isPlaying)\r\n\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        console.log(\"3\",isPlaying)\r\n\r\n        const x = canvas.width / 2\r\n        console.log(\"4\",isPlaying)\r\n\r\n        const y = canvas.height / 2\r\n        console.log(\"5\",isPlaying)\r\n\r\n        player = new Player(x, y, 10, \"red\",)\r\n        console.log(\"6\",isPlaying)\r\n\r\n        spawnEnemies()\r\n        animate()\r\n    }\r\n\r\n\r\n    function spawnEnemies() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n\r\n        let newEnemies = enemies;\r\n        // const canvas = canvasRef.current;\r\n        // const canvasContext = canvasRef.current.getContext(\"2d\")\r\n        setInterval(() => {\r\n            const radius = Math.random() * (50 - 10) + 10\r\n\r\n            let x;\r\n            let y;\r\n\r\n            if (Math.random() < 0.5) {\r\n\r\n                x = Math.random() < 0.5 ? 0 - radius : canvas.width + radius\r\n                y = Math.random() * canvas.height\r\n            } else {\r\n                x = Math.random() * canvas.width\r\n                y = Math.random() < 0.5 ? 0 - radius : canvas.height + radius\r\n            }\r\n            const color = `hsl(${Math.random() * 360} , 50%, 50%)`\r\n\r\n            const angle = Math.atan2(\r\n                canvas.height / 2 - y,\r\n                canvas.width / 2 - x)\r\n            const velocity = {\r\n                x: Math.cos(angle),\r\n                y: Math.sin(angle)\r\n            }\r\n            newEnemies.push(new Enemy(x, y, radius, color, velocity))\r\n            setEnemies(newEnemies)\r\n        }, 1000)\r\n    }\r\n\r\n\r\n    function animate() {\r\n        const canvas = canvasRef.current;\r\n        const canvasContext = canvas.getContext(\"2d\");\r\n        let animeationId;\r\n        let newParticles = particles\r\n        let newProjectiles = projectiles\r\n        let newEnemies = enemies\r\n\r\n\r\n        animeationId = requestAnimationFrame(animate)\r\n        canvasContext.fillStyle = \"rgba(0,0,0,0.2)\"\r\n        canvasContext.fillRect(0, 0, canvas.width, canvas.height)\r\n\r\n        player.draw();\r\n\r\n        if(!isPlaying){\r\n            cancelAnimationFrame(animeationId)\r\n        }\r\n        //create explosions\r\n        newParticles.forEach((particle, index) => {\r\n            if (particle.alpha <= 0) {\r\n                particles.splice(index, 1)\r\n                setParticles(newParticles)\r\n\r\n            } else {\r\n                particle.update()\r\n            }\r\n        });\r\n        //create projectiles\r\n        newProjectiles.forEach((projectile, index) => {\r\n            projectile.update()\r\n\r\n            if (projectile.x + projectile.radius < 0 ||\r\n                projectile.x - projectile.radius > canvas.width ||\r\n                projectile.y + projectile.radius < 0 ||\r\n                projectile.y - projectile.radius > canvas.height) {\r\n                setTimeout(() => {\r\n                    newProjectiles.splice(index, 1)\r\n                    setProjectiles(newProjectiles)\r\n                }, 0)\r\n            }\r\n\r\n        })\r\n\r\n        newEnemies.forEach((enemy, index) => {\r\n            enemy.update()\r\n\r\n            //gets the distance from an enemy to the player\r\n            const dist = Math.hypot(player.x - enemy.x, player.y - enemy.y)\r\n\r\n            if (dist - enemy.radius - player.radius < 1) {\r\n                cancelAnimationFrame(animeationId)\r\n            }\r\n\r\n            newProjectiles.forEach((projectile, pIndex) => {\r\n                const dist = Math.hypot(projectile.x - enemy.x, projectile.y - enemy.y)\r\n                //Peojectiles hit enemy\r\n                if (dist - enemy.radius - projectile.radius < 5) {\r\n\r\n\r\n                    //create explosions\r\n                    for (let i = 0; i < enemy.radius * 2; i++) {\r\n                        newParticles.push(new Particle(\r\n                            projectile.x, // spawn location projectiles x\r\n                            projectile.y, // spawn location projectiles y\r\n                            Math.random() * 2, //radius(size) of particle\r\n                            enemy.color, { //makes explosion same color as enemy\r\n                            x: (Math.random() - 0.5) * (Math.random() * 8),//x volocity\r\n                            y: (Math.random() - 0.5) * (Math.random() * 8) //y volocity\r\n                        }))\r\n                    }\r\n                    setParticles(newParticles)\r\n\r\n                    if (enemy.radius - 10 > 5) {\r\n                        //the score\r\n                        setScore(score += 100)\r\n                        gsap.to(enemy, { radius: enemy.radius - 10 })\r\n                        setTimeout(() => {\r\n                            newProjectiles.splice(pIndex, 1)\r\n                            setProjectiles(newProjectiles)\r\n                        }, 0)\r\n                    }\r\n                    else {\r\n                        setScore(score += 250)\r\n                        setTimeout(() => {\r\n                            newEnemies.splice(index, 1)\r\n                            newProjectiles.splice(pIndex, 1)\r\n                            setEnemies(newEnemies)\r\n                            setProjectiles(newProjectiles)\r\n                        }, 0)\r\n                    }\r\n                }\r\n\r\n            })\r\n        })\r\n    }\r\n\r\n    function handleClick(event) {\r\n        const canvas = canvasRef.current\r\n        let newProjectiles = projectiles\r\n        const angle = Math.atan2(\r\n            event.clientY - height / 2,\r\n            event.clientX -  width / 2)\r\n        const velocity = {\r\n            x: Math.cos(angle) * 5,\r\n            y: Math.sin(angle) * 5\r\n        }\r\n        newProjectiles.push(\r\n            new Projectile(\r\n                canvas.width / 2,\r\n                canvas.height / 2,\r\n                5,\r\n                \"white\",\r\n                velocity\r\n            )\r\n        )\r\n        setProjectiles(newProjectiles)\r\n\r\n    }\r\n\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"score\">\r\n                <span>Score:  </span>\r\n                <span>{score}</span>\r\n            </div>\r\n            <canvas ref={canvasRef}{...props} onClick={(e) => handleClick(e)}></canvas>\r\n            <button onClick={() => startGame()} className=\"thebutton\">The Button</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\nexport default Canvas;\r\n",["65","66"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoards.tsx",["67"],"import React from \"react\";\r\nimport LeaderBoardsDisplay from \"./LeaderBoardDisplay\"\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nclass LeaderBoards extends React.Component {\r\n    state ={\r\n        players: []\r\n    }\r\n\r\n    componentDidMount(){\r\n        fetch(`http://localhost:3000/score/allScores/`, {\r\n            method: \"GET\",\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n            }\r\n        })\r\n        .then(res => res.json())\r\n        .then(data => this.setState({players: data}))\r\n    }\r\n\r\n    render(){\r\n        return (\r\n            <LeaderBoardsDisplay players={this.state.players}/>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LeaderBoards;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\LeaderBoard\\LeaderBoardDisplay.tsx",["68","69"],"import { makeStyles, createStyles, Theme } from '@material-ui/core/styles';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport { DataGrid, ColDef } from '@material-ui/data-grid';\r\n\r\nconst useStyle = makeStyles((theme: Theme) =>\r\n    createStyles({\r\n        root: {\r\n            flexGrow: 1,\r\n        },\r\n        paper: {\r\n            padding: theme.spacing(2),\r\n            textAlign: \"center\",\r\n            color: theme.palette.text.primary\r\n        }\r\n\r\n    })\r\n)\r\n\r\n\r\nconst LeaderBoardsDisplay = (props: any) => {\r\n    const classes = useStyle();\r\n    return (\r\n        <div className={classes.root}>\r\n            \r\n            <Grid container direction=\"column\" justify=\"center\" alignItems=\"center\" spacing={2}>\r\n                {\r\n                    props.players.map((player: any, index: number) => {\r\n                        return (\r\n                            <Grid item xs key={index}>\r\n                                <Paper className={classes.paper}>\r\n                                    {player.gameName}<br/>\r\n                                    {player.user.userName}<br/>\r\n                                    {player.score}\r\n                                </Paper>\r\n                            </Grid>\r\n                        )\r\n                    })\r\n                }\r\n            </Grid>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default LeaderBoardsDisplay;","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\Message.tsx",["70","71","72"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\MessageDisplay.tsx",["73","74","75"],"C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Nav\\SideNav.tsx",["76","77","78"],"import React from \"react\";\r\nimport { Theme } from '@material-ui/core/styles';\r\nimport { withStyles } from \"@material-ui/core/styles\";\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport {Link} from \"@material-ui/core\" \r\nimport Collapse from '@material-ui/core/Collapse';\r\nimport InboxIcon from '@material-ui/icons/MoveToInbox';\r\nimport DraftsIcon from '@material-ui/icons/Drafts';\r\nimport SendIcon from '@material-ui/icons/Send';\r\nimport ExpandLess from '@material-ui/icons/ExpandLess';\r\nimport ExpandMore from '@material-ui/icons/ExpandMore';\r\nimport StarBorder from '@material-ui/icons/StarBorder';\r\n\r\n\r\nconst styles = (theme:Theme) => ({\r\n    root: {\r\n            width: '100%',\r\n            maxWidth: 360,\r\n            backgroundColor: theme.palette.background.paper,\r\n          },\r\n          nested: {\r\n            paddingLeft: theme.spacing(4),\r\n          },\r\n  });\r\n\r\ntype myProps = {\r\n    token: string | null;\r\n    classes: any;\r\n    clearToken(): void;\r\n}\r\ntype myState = {\r\n    isLoggedIn: boolean;\r\n    open: boolean;\r\n    token: string | null;\r\n}\r\n  \r\n     \r\n  class SideNav extends React.Component<myProps, myState>{\r\n      constructor(props: myProps){\r\n          super(props)\r\n          this.state = {\r\n            isLoggedIn: false,\r\n            open: false,\r\n            token: \"\"\r\n            }\r\n        }\r\n\r\n        componentDidMount(){\r\n          if(localStorage.getItem(\"token\")){\r\n            this.setState({isLoggedIn: true})\r\n            this.setState({token: localStorage.getItem(\"token\")})\r\n          }else{\r\n            this.setState({isLoggedIn:false})\r\n            this.setState({token: \"\"})\r\n          }\r\n              // if(this.props.token){\r\n              //      this.setState({isLoggedIn: true})\r\n              //      this.setState({token: this.props.token})\r\n              // }else{\r\n              //      this.setState({isLoggedIn: false})\r\n              //      this.setState({token: this.props.token})\r\n              // }\r\n        }\r\n\r\n        componentDidUpdate(){\r\n          console.log(\"did update\")\r\n          if(localStorage.getItem(\"token\") !== this.state.token){\r\n            this.setState({isLoggedIn: true})\r\n            this.setState({token: localStorage.getItem(\"token\")}) \r\n          }else if(!localStorage.getItem(\"token\") && this.state.isLoggedIn == true){\r\n            this.setState({isLoggedIn: false})\r\n            this.setState({token: localStorage.getItem(\"token\")})\r\n          }\r\n      //     if(this.props.token !== this.state.token){\r\n      //       this.setState({isLoggedIn: true})\r\n      //       this.setState({token: this.props.token})\r\n      //  }else if(!this.props.token && this.state.isLoggedIn == true){\r\n      //       this.setState({isLoggedIn: false})\r\n      //       this.setState({token: this.props.token})\r\n      //  }\r\n        }\r\n\r\n        loginDisplay = (classes:any) =>{\r\n            if(this.state.isLoggedIn){\r\n              return(\r\n                <div>\r\n        \r\n                <ListItem button onClick={this.handleClick}>\r\n                <ListItemIcon>\r\n                  <DraftsIcon/>\r\n                </ListItemIcon>\r\n                <ListItemText primary=\"Mail\" />\r\n                {this.state.open ? <ExpandLess /> : <ExpandMore />}\r\n              </ListItem>\r\n              <Collapse in={this.state.open} timeout=\"auto\" unmountOnExit>\r\n                <List component=\"div\" disablePadding>\r\n                  <Link color=\"inherit\" href=\"/message\">\r\n                  <ListItem button className={classes.nested}>\r\n                    <ListItemIcon>\r\n                      <InboxIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"Inbox\" />\r\n                  </ListItem>\r\n                  </Link>\r\n                  <Link color=\"inherit\" href=\"/message\">\r\n                  <ListItem button className={classes.nested}>\r\n                    <ListItemIcon>\r\n                      <InboxIcon />\r\n                    </ListItemIcon>\r\n                    <ListItemText primary=\"send new message\" />\r\n                  </ListItem>\r\n                  </Link>\r\n                </List>\r\n              </Collapse>\r\n              <ListItem button onClick={this.handleLogout}>\r\n                <ListItemText primary=\"Logout\"/>\r\n              </ListItem>\r\n\r\n                </div>\r\n              )   }else{\r\n                return (\r\n                  <div>\r\n          \r\n                  <Link color=\"inherit\" href=\"/login\">\r\n                  <ListItem button>\r\n                  <ListItemIcon>\r\n                  </ListItemIcon>\r\n                  <ListItemText primary=\"login/signup\" />\r\n                </ListItem>\r\n                  </Link>\r\n          \r\n          {/* <Link color=\"inherit\" href=\"/register\">\r\n          <ListItem button>\r\n          <ListItemIcon>\r\n          </ListItemIcon>\r\n          <ListItemText primary=\"login\" />\r\n          </ListItem>\r\n          </Link> */}\r\n                  </div>\r\n                  \r\n                )\r\n              }\r\n            }\r\n            handleLogout = () => {\r\n              this.props.clearToken()\r\n              localStorage.clear()\r\n              }\r\n              handleClick = () => {\r\n                this.setState({open: !this.state.open});\r\n              };\r\n    render(){\r\n\r\n        const {classes} = this.props;\r\n    return (\r\n      <List\r\n      component=\"nav\"\r\n      aria-labelledby=\"nested-list-subheader\"\r\n      subheader={\r\n        <ListSubheader component=\"div\" id=\"nested-list-subheader\">\r\n          Welcome to GameDomain!\r\n        </ListSubheader>\r\n      }\r\n      className={classes.root}\r\n      >\r\n        <Link color=\"inherit\" href=\"/leaderboard\">\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Check the LeaderBoards!\" />\r\n      </ListItem>\r\n        </Link>\r\n        <Link color=\"inherit\" href=\"/game\">\r\n      <ListItem button>\r\n        <ListItemIcon>\r\n        </ListItemIcon>\r\n        <ListItemText primary=\"Play A Game!!!\" />\r\n      </ListItem>\r\n        </Link>\r\n        {this.loginDisplay(classes)}\r\n    </List>\r\n  );\r\n}\r\n}\r\n\r\nexport default withStyles(styles)(SideNav)","C:\\Users\\Schul\\OneDrive\\Desktop\\redbadge\\GameDomainClient\\src\\Components\\Message\\SendMessage.tsx",[],{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"84","line":5,"column":22,"nodeType":"85","messageId":"86","endLine":5,"endColumn":32},{"ruleId":"83","severity":1,"message":"87","line":6,"column":32,"nodeType":"85","messageId":"86","endLine":6,"endColumn":46},{"ruleId":"83","severity":1,"message":"88","line":7,"column":16,"nodeType":"85","messageId":"86","endLine":7,"endColumn":22},{"ruleId":"89","severity":1,"message":"90","line":34,"column":7,"nodeType":"91","endLine":34,"endColumn":18,"suggestions":"92"},{"ruleId":"93","severity":1,"message":"94","line":176,"column":15,"nodeType":"85","messageId":"86","endLine":176,"endColumn":28},{"ruleId":"93","severity":1,"message":"94","line":195,"column":15,"nodeType":"85","messageId":"86","endLine":195,"endColumn":28},{"ruleId":"93","severity":1,"message":"94","line":214,"column":15,"nodeType":"85","messageId":"86","endLine":214,"endColumn":28},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"83","severity":1,"message":"95","line":3,"column":8,"nodeType":"85","messageId":"86","endLine":3,"endColumn":12},{"ruleId":"83","severity":1,"message":"96","line":4,"column":10,"nodeType":"85","messageId":"86","endLine":4,"endColumn":18},{"ruleId":"83","severity":1,"message":"97","line":4,"column":20,"nodeType":"85","messageId":"86","endLine":4,"endColumn":26},{"ruleId":"83","severity":1,"message":"98","line":4,"column":10,"nodeType":"85","messageId":"86","endLine":4,"endColumn":25},{"ruleId":"83","severity":1,"message":"99","line":5,"column":28,"nodeType":"85","messageId":"86","endLine":5,"endColumn":38},{"ruleId":"83","severity":1,"message":"100","line":7,"column":7,"nodeType":"85","messageId":"86","endLine":7,"endColumn":13},{"ruleId":"83","severity":1,"message":"95","line":4,"column":8,"nodeType":"85","messageId":"86","endLine":4,"endColumn":12},{"ruleId":"83","severity":1,"message":"101","line":10,"column":8,"nodeType":"85","messageId":"86","endLine":10,"endColumn":23},{"ruleId":"83","severity":1,"message":"102","line":189,"column":17,"nodeType":"85","messageId":"86","endLine":189,"endColumn":24},{"ruleId":"83","severity":1,"message":"103","line":13,"column":8,"nodeType":"85","messageId":"86","endLine":13,"endColumn":16},{"ruleId":"83","severity":1,"message":"104","line":16,"column":8,"nodeType":"85","messageId":"86","endLine":16,"endColumn":18},{"ruleId":"105","severity":1,"message":"106","line":74,"column":76,"nodeType":"107","messageId":"108","endLine":74,"endColumn":78},"no-native-reassign",["109"],"no-negated-in-lhs",["110"],"@typescript-eslint/no-unused-vars","'makeStyles' is defined but never used.","Identifier","unusedVar","'createMuiTheme' is defined but never used.","'Button' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'buildGame'. Either include it or remove the dependency array.","ArrayExpression",["111"],"no-unused-vars","'canvasContext' is assigned a value but never used.","'Grid' is defined but never used.","'DataGrid' is defined but never used.","'ColDef' is defined but never used.","'getMaxListeners' is defined but never used.","'withStyles' is defined but never used.","'styles' is assigned a value but never used.","'TablePagination' is defined but never used.","'classes' is assigned a value but never used.","'SendIcon' is defined but never used.","'StarBorder' is defined but never used.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-global-assign","no-unsafe-negation",{"desc":"112","fix":"113"},"Update the dependencies array to be: [buildGame, isPlaying]",{"range":"114","text":"115"},[1172,1183],"[buildGame, isPlaying]"]